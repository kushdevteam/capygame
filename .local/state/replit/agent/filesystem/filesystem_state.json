{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Save the Capybara Game\n\n## Overview\n\nSave the Capybara is a browser-based tower defense game built with Phaser 3 and React. Players draw protective barriers to shield a capybara from incoming bees across 12 handcrafted levels. The game features a drawing phase where players have limited time and ink to create barriers, followed by a survival phase where they must protect the capybara for 5 seconds. The application integrates Solana wallet connectivity for future reward distribution, allowing players to link their wallet addresses with their game scores.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Game Engine**: Phaser 3 with TypeScript for core game mechanics, physics, and rendering\n- **UI Framework**: React with TypeScript for user interface components and state management\n- **Styling**: TailwindCSS with custom design system using CSS variables and Radix UI components\n- **State Management**: Zustand stores for game state, audio controls, and wallet connectivity\n- **Build Tool**: Vite with custom configuration supporting GLSL shaders and large asset files\n\n### Game Structure\n- **Scene Management**: Three main Phaser scenes (MenuScene, GameScene, GameOverScene) with React overlay components\n- **Level System**: JSON-based level configuration with customizable capybara positions, bee spawn patterns, and ink limits\n- **Drawing Mechanics**: Real-time barrier drawing with ink consumption tracking and collision detection\n- **Physics**: Arcade physics system for bee movement, collision detection, and barrier interactions\n\n### Backend Architecture\n- **Server Framework**: Express.js with TypeScript serving both API endpoints and static assets\n- **Development Setup**: Vite middleware integration for hot module replacement and development serving\n- **API Design**: RESTful endpoints for score submission and leaderboard functionality\n- **Storage**: In-memory storage implementation with interface for future database integration\n\n### Database Design\n- **ORM**: Drizzle ORM configured for PostgreSQL with migration support\n- **Schema**: User table structure defined with Zod validation schemas\n- **Current State**: Database configuration present but not actively used in game logic\n\n### Authentication & User Management\n- **Wallet Integration**: Solana wallet adapter supporting Phantom, Solflare, and Backpack wallets\n- **Session Management**: LocalStorage-based persistence for wallet addresses and game progress\n- **Connection Handling**: React context providers managing wallet state and connectivity\n\n## External Dependencies\n\n### Blockchain Integration\n- **Solana Wallet Adapter**: Complete wallet connectivity suite with React components and hooks\n- **Network Configuration**: Mainnet connection for production wallet linking (no actual transactions)\n- **Supported Wallets**: Phantom, Solflare, and Backpack wallet adapters\n\n### Database & Storage\n- **Database**: PostgreSQL configured through Neon serverless driver\n- **ORM**: Drizzle with TypeScript support and automatic schema validation\n- **Migration System**: Drizzle Kit for database schema management and version control\n\n### UI & Styling\n- **Component Library**: Extensive Radix UI component collection for accessible UI elements\n- **Styling System**: TailwindCSS with custom theme configuration and dark mode support\n- **Icons**: Lucide React for consistent iconography throughout the application\n\n### Game & Media\n- **3D Graphics**: React Three Fiber and Drei for potential 3D elements and post-processing\n- **Asset Handling**: Vite configuration supporting GLTF, GLB, and audio file formats\n- **Audio Support**: MP3, OGG, and WAV format support with muted-by-default audio controls\n\n### Development Tools\n- **Build System**: Vite with custom plugins for runtime error handling and GLSL shader support\n- **Type Safety**: TypeScript configuration with strict mode and comprehensive type checking\n- **Query Management**: TanStack React Query for API state management and caching\n- **Development Server**: Express middleware integration with Vite for seamless development experience","size_bytes":4157},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\nimport glsl from \"vite-plugin-glsl\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    glsl(), // Add GLSL shader support\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  // Add support for large models and audio files\n  assetsInclude: [\"**/*.gltf\", \"**/*.glb\", \"**/*.mp3\", \"**/*.ogg\", \"**/*.wav\"],\n});\n","size_bytes":896},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Try to start the Telegram bot (will be disabled if token is missing)\n  try {\n    await import(\"./telegram-bot\");\n  } catch (error) {\n    console.log(\"Telegram bot not started - this is normal if no token is provided\");\n  }\n\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2100},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport crypto from \"crypto\";\n\nfunction hashPin(pin: string): string {\n  return crypto.createHash('sha256').update(pin).digest('hex');\n}\n\n// Helper function to check achievement criteria\nasync function checkAndAwardAchievements(userId: number): Promise<void> {\n  try {\n    const user = await storage.getUser(userId);\n    if (!user) return;\n\n    const existingAchievements = await storage.getUserAchievements(userId);\n    const achievedTypes = existingAchievements.map(a => a.achievementType);\n\n    // Define achievement criteria\n    const achievements = [\n      {\n        type: \"FIRST_GAME\",\n        name: \"Getting Started\",\n        points: 10,\n        criteria: () => (user.gamesPlayed || 0) >= 1\n      },\n      {\n        type: \"COMPLETE_5_LEVELS\", \n        name: \"Level Master\",\n        points: 50,\n        criteria: () => (user.levelsCompleted || 0) >= 5\n      },\n      {\n        type: \"SCORE_10K\",\n        name: \"High Scorer\", \n        points: 100,\n        criteria: () => (user.totalScore || 0) >= 10000\n      },\n      {\n        type: \"PLAY_10_GAMES\",\n        name: \"Regular Player\",\n        points: 75,\n        criteria: () => (user.gamesPlayed || 0) >= 10\n      },\n      {\n        type: \"REACH_LEVEL_5\",\n        name: \"Progress Master\",\n        points: 50,\n        criteria: () => (user.highestLevel || 1) >= 5\n      }\n    ];\n\n    // Award new achievements\n    for (const achievement of achievements) {\n      if (!achievedTypes.includes(achievement.type) && achievement.criteria()) {\n        await storage.addAchievement({\n          userId,\n          achievementType: achievement.type,\n          achievementName: achievement.name,\n          pointsAwarded: achievement.points\n        });\n      }\n    }\n  } catch (error) {\n    console.error(\"Error checking achievements:\", error);\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Enhanced user registration with wallet verification\n  app.post(\"/api/register\", async (req, res) => {\n    try {\n      const { walletAddress, username, pin } = req.body;\n      \n      if (!walletAddress || !username || !pin) {\n        return res.status(400).json({ error: \"Missing required fields\" });\n      }\n      \n      if (pin.length !== 4 || !/^\\d+$/.test(pin)) {\n        return res.status(400).json({ error: \"PIN must be exactly 4 digits\" });\n      }\n\n      // Enhanced validation for Solana wallet address\n      if (typeof walletAddress !== 'string' || walletAddress.length < 32) {\n        return res.status(400).json({ error: \"Invalid Solana wallet address\" });\n      }\n      \n      // Check if wallet address already exists (prevent duplicates)\n      const existingUserByWallet = await storage.getUserByWallet(walletAddress);\n      if (existingUserByWallet) {\n        return res.status(409).json({ error: \"Wallet address already registered. Only one account per wallet address is allowed.\" });\n      }\n      \n      // Check if username already exists\n      const existingUserByUsername = await storage.getUserByUsername(username);\n      if (existingUserByUsername) {\n        return res.status(409).json({ error: \"Username already taken\" });\n      }\n      \n      const hashedPin = hashPin(pin);\n      \n      const user = await storage.createUser({\n        walletAddress,\n        username,\n        pin: hashedPin\n      });\n      \n      // Award first achievement\n      await checkAndAwardAchievements(user.id);\n      \n      // Return user data (without PIN)\n      const safeUser = {\n        id: user.id,\n        walletAddress: user.walletAddress,\n        username: user.username,\n        totalScore: user.totalScore,\n        levelsCompleted: user.levelsCompleted,\n        achievementPoints: user.achievementPoints\n      };\n      \n      res.json({ success: true, user: safeUser });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Enhanced user login\n  app.post(\"/api/login\", async (req, res) => {\n    try {\n      const { walletAddress, pin } = req.body;\n      \n      if (!walletAddress || !pin) {\n        return res.status(400).json({ error: \"Missing wallet address or PIN\" });\n      }\n      \n      const user = await storage.getUserByWallet(walletAddress);\n      if (!user) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n      \n      const hashedPin = hashPin(pin);\n      if (user.pin !== hashedPin) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n      \n      // Update last login time\n      await storage.updateUserStats(user.id, { lastLoginAt: new Date() });\n      \n      // Return enhanced user data\n      const safeUser = {\n        id: user.id,\n        walletAddress: user.walletAddress,\n        username: user.username,\n        totalScore: user.totalScore,\n        levelsCompleted: user.levelsCompleted,\n        highestLevel: user.highestLevel,\n        gamesPlayed: user.gamesPlayed,\n        achievementPoints: user.achievementPoints,\n        consecutiveDays: user.consecutiveDays,\n        averageScorePerLevel: user.averageScorePerLevel,\n        isEligibleForRewards: user.isEligibleForRewards\n      };\n      \n      res.json({ success: true, user: safeUser });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Enhanced score submission with achievement checking\n  app.post(\"/api/submit-score\", async (req, res) => {\n    try {\n      const { walletAddress, level, score, completed, playTimeSeconds } = req.body;\n      \n      if (!walletAddress || typeof level !== 'number' || typeof score !== 'number') {\n        return res.status(400).json({ error: \"Invalid input data\" });\n      }\n      \n      const user = await storage.getUserByWallet(walletAddress);\n      if (!user) {\n        return res.status(401).json({ error: \"User not found\" });\n      }\n      \n      const gameScore = await storage.submitScore({\n        userId: user.id,\n        level,\n        score,\n        completed: !!completed,\n        playTimeSeconds: playTimeSeconds || 0\n      });\n      \n      // Check for new achievements\n      await checkAndAwardAchievements(user.id);\n      \n      // Update leaderboards\n      await storage.updateLeaderboards();\n      \n      console.log(\"Score submitted for user:\", user.username, \"Score:\", score, \"Level:\", level);\n      \n      res.json({ success: true, message: \"Score submitted successfully\" });\n    } catch (error) {\n      console.error(\"Score submission error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Enhanced leaderboard with multiple types\n  app.get(\"/api/leaderboard\", async (req, res) => {\n    try {\n      const type = req.query.type as 'daily' | 'weekly' | 'all_time' || 'all_time';\n      const limit = parseInt(req.query.limit as string) || 50;\n      \n      const leaderboard = await storage.getLeaderboard(type, limit);\n      res.json(leaderboard);\n    } catch (error) {\n      console.error(\"Leaderboard error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // User profile endpoint\n  app.get(\"/api/profile/:walletAddress\", async (req, res) => {\n    try {\n      const { walletAddress } = req.params;\n      \n      const user = await storage.getUserByWallet(walletAddress);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      const achievements = await storage.getUserAchievements(user.id);\n      const recentScores = await storage.getUserScores(user.id);\n      \n      const profile = {\n        username: user.username,\n        walletAddress: user.walletAddress,\n        totalScore: user.totalScore,\n        levelsCompleted: user.levelsCompleted,\n        highestLevel: user.highestLevel,\n        gamesPlayed: user.gamesPlayed,\n        achievementPoints: user.achievementPoints,\n        averageScorePerLevel: user.averageScorePerLevel,\n        totalPlayTimeMinutes: user.totalPlayTimeMinutes,\n        consecutiveDays: user.consecutiveDays,\n        isEligibleForRewards: user.isEligibleForRewards,\n        joinedAt: user.createdAt,\n        lastActiveAt: user.lastLoginAt,\n        achievements: achievements.slice(0, 5), // Recent 5 achievements\n        recentScores: recentScores.slice(0, 10) // Recent 10 scores\n      };\n      \n      res.json(profile);\n    } catch (error) {\n      console.error(\"Profile error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Admin endpoint for airdrop data export\n  app.get(\"/api/admin/airdrop-data\", async (req, res) => {\n    try {\n      // In production, add authentication middleware here\n      const airdropData = await storage.getAirdropData();\n      \n      res.setHeader('Content-Type', 'application/json');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"airdrop-eligible-users.json\"');\n      res.json({\n        exportedAt: new Date().toISOString(),\n        totalEligibleUsers: airdropData.length,\n        users: airdropData\n      });\n    } catch (error) {\n      console.error(\"Airdrop data export error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // User achievements endpoint  \n  app.get(\"/api/achievements/:walletAddress\", async (req, res) => {\n    try {\n      const { walletAddress } = req.params;\n      \n      const user = await storage.getUserByWallet(walletAddress);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      const achievements = await storage.getUserAchievements(user.id);\n      res.json(achievements);\n    } catch (error) {\n      console.error(\"Achievements error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Session tracking endpoints\n  app.post(\"/api/session/start\", async (req, res) => {\n    try {\n      const { walletAddress } = req.body;\n      \n      const user = await storage.getUserByWallet(walletAddress);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      const session = await storage.createSession({\n        userId: user.id,\n        totalPlayTimeMinutes: 0,\n        levelsPlayed: 0\n      });\n      \n      res.json({ success: true, sessionId: session.id });\n    } catch (error) {\n      console.error(\"Session start error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":10648},"server/storage.ts":{"content":"import { neon } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-http';\nimport { eq, desc, sql, and } from 'drizzle-orm';\nimport { \n  users, \n  gameScores, \n  gameSessions, \n  userAchievements, \n  leaderboards,\n  type User, \n  type InsertUser,\n  type GameScore,\n  type InsertScore,\n  type GameSession,\n  type InsertSession,\n  type UserAchievement,\n  type InsertAchievement\n} from \"../shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error('DATABASE_URL environment variable is required');\n}\n\nconst neonClient = neon(process.env.DATABASE_URL!);\nexport const db = drizzle(neonClient);\n\nexport interface IStorage {\n  // User management\n  getUser(id: number): Promise<User | undefined>;\n  getUserByWallet(walletAddress: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, updates: Partial<User>): Promise<User | undefined>;\n  updateUserStats(userId: number, stats: Partial<User>): Promise<void>;\n  \n  // Score management\n  submitScore(score: InsertScore): Promise<GameScore>;\n  getUserScores(userId: number): Promise<GameScore[]>;\n  getTopScores(limit?: number): Promise<any[]>;\n  \n  // Session tracking\n  createSession(session: InsertSession): Promise<GameSession>;\n  endSession(sessionId: number, endTime: Date): Promise<void>;\n  getUserSessions(userId: number): Promise<GameSession[]>;\n  \n  // Achievement system\n  addAchievement(achievement: InsertAchievement): Promise<UserAchievement>;\n  getUserAchievements(userId: number): Promise<UserAchievement[]>;\n  \n  // Leaderboards\n  updateLeaderboards(): Promise<void>;\n  getLeaderboard(type: 'daily' | 'weekly' | 'all_time', limit?: number): Promise<any[]>;\n  \n  // Admin data export\n  getAirdropData(): Promise<any[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: number): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByWallet(walletAddress: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.walletAddress, walletAddress)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values({\n      ...insertUser,\n      lastLoginAt: new Date(),\n      totalScore: 0,\n      levelsCompleted: 0,\n      highestLevel: 1,\n      gamesPlayed: 0,\n      consecutiveDays: 1,\n      totalPlayTimeMinutes: 0,\n      averageScorePerLevel: 0,\n      achievementPoints: 0,\n      isEligibleForRewards: true\n    }).returning();\n    return result[0];\n  }\n\n  async updateUser(id: number, updates: Partial<User>): Promise<User | undefined> {\n    const result = await db.update(users).set(updates).where(eq(users.id, id)).returning();\n    return result[0];\n  }\n\n  async updateUserStats(userId: number, stats: Partial<User>): Promise<void> {\n    await db.update(users).set({\n      ...stats,\n      lastLoginAt: new Date()\n    }).where(eq(users.id, userId));\n  }\n\n  async submitScore(score: InsertScore): Promise<GameScore> {\n    const result = await db.insert(gameScores).values({\n      ...score,\n      timestamp: new Date()\n    }).returning();\n    \n    // Update user statistics\n    await this.recalculateUserStats(score.userId!);\n    \n    return result[0];\n  }\n\n  private async recalculateUserStats(userId: number): Promise<void> {\n    const userScores = await db.select().from(gameScores).where(eq(gameScores.userId, userId));\n    const completedLevels = userScores.filter(s => s.completed).length;\n    const totalScore = userScores.reduce((sum, s) => sum + s.score, 0);\n    const highestLevel = Math.max(...userScores.map(s => s.level), 1);\n    const averageScore = userScores.length > 0 ? totalScore / userScores.length : 0;\n    \n    await db.update(users).set({\n      totalScore,\n      levelsCompleted: completedLevels,\n      highestLevel,\n      gamesPlayed: userScores.length,\n      averageScorePerLevel: averageScore\n    }).where(eq(users.id, userId));\n  }\n\n  async getUserScores(userId: number): Promise<GameScore[]> {\n    return await db.select().from(gameScores).where(eq(gameScores.userId, userId)).orderBy(desc(gameScores.timestamp));\n  }\n\n  async getTopScores(limit = 100): Promise<any[]> {\n    const topScores = await db\n      .select({\n        score: gameScores.score,\n        level: gameScores.level,\n        completed: gameScores.completed,\n        timestamp: gameScores.timestamp,\n        username: users.username,\n        walletAddress: users.walletAddress\n      })\n      .from(gameScores)\n      .innerJoin(users, eq(gameScores.userId, users.id))\n      .orderBy(desc(gameScores.score))\n      .limit(limit);\n    \n    return topScores.map((score, index) => ({\n      rank: index + 1,\n      username: score.username,\n      walletAddress: `${score.walletAddress.slice(0, 4)}...${score.walletAddress.slice(-4)}`,\n      score: score.score,\n      level: score.level,\n      completed: score.completed\n    }));\n  }\n\n  async createSession(session: InsertSession): Promise<GameSession> {\n    const result = await db.insert(gameSessions).values({\n      ...session,\n      startTime: new Date()\n    }).returning();\n    return result[0];\n  }\n\n  async endSession(sessionId: number, endTime: Date): Promise<void> {\n    await db.update(gameSessions).set({ endTime }).where(eq(gameSessions.id, sessionId));\n  }\n\n  async getUserSessions(userId: number): Promise<GameSession[]> {\n    return await db.select().from(gameSessions).where(eq(gameSessions.userId, userId)).orderBy(desc(gameSessions.startTime));\n  }\n\n  async addAchievement(achievement: InsertAchievement): Promise<UserAchievement> {\n    const result = await db.insert(userAchievements).values({\n      ...achievement,\n      unlockedAt: new Date()\n    }).returning();\n    \n    // Update user achievement points\n    await db.update(users).set({\n      achievementPoints: sql`${users.achievementPoints} + ${achievement.pointsAwarded}`\n    }).where(eq(users.id, achievement.userId!));\n    \n    return result[0];\n  }\n\n  async getUserAchievements(userId: number): Promise<UserAchievement[]> {\n    return await db.select().from(userAchievements).where(eq(userAchievements.userId, userId)).orderBy(desc(userAchievements.unlockedAt));\n  }\n\n  async updateLeaderboards(): Promise<void> {\n    const today = new Date();\n    const weekStart = new Date(today.getFullYear(), today.getMonth(), today.getDate() - today.getDay());\n    \n    // Update daily leaderboard\n    const dailyScores = await db\n      .select({\n        userId: gameScores.userId,\n        score: sql<number>`MAX(${gameScores.score})`.as('max_score'),\n        level: sql<number>`MAX(${gameScores.level})`.as('max_level')\n      })\n      .from(gameScores)\n      .where(sql`DATE(${gameScores.timestamp}) = CURRENT_DATE`)\n      .groupBy(gameScores.userId)\n      .orderBy(desc(sql`MAX(${gameScores.score})`));\n    \n    // Clear existing daily leaderboard for today\n    await db.delete(leaderboards).where(and(\n      eq(leaderboards.leaderboardType, 'daily'),\n      sql`DATE(${leaderboards.periodDate}) = CURRENT_DATE`\n    ));\n    \n    // Insert new daily rankings\n    for (let i = 0; i < dailyScores.length; i++) {\n      await db.insert(leaderboards).values({\n        userId: dailyScores[i].userId,\n        leaderboardType: 'daily',\n        score: dailyScores[i].score,\n        level: dailyScores[i].level,\n        rank: i + 1,\n        periodDate: today.toISOString().split('T')[0]\n      });\n    }\n  }\n\n  async getLeaderboard(type: 'daily' | 'weekly' | 'all_time', limit = 50): Promise<any[]> {\n    if (type === 'all_time') {\n      return await this.getTopScores(limit);\n    }\n    \n    const result = await db\n      .select({\n        rank: leaderboards.rank,\n        score: leaderboards.score,\n        level: leaderboards.level,\n        username: users.username,\n        walletAddress: users.walletAddress\n      })\n      .from(leaderboards)\n      .innerJoin(users, eq(leaderboards.userId, users.id))\n      .where(eq(leaderboards.leaderboardType, type))\n      .orderBy(leaderboards.rank)\n      .limit(limit);\n    \n    return result.map(entry => ({\n      rank: entry.rank,\n      username: entry.username,\n      walletAddress: `${entry.walletAddress.slice(0, 4)}...${entry.walletAddress.slice(-4)}`,\n      score: entry.score,\n      level: entry.level\n    }));\n  }\n\n  async getAirdropData(): Promise<any[]> {\n    const result = await db\n      .select({\n        username: users.username,\n        walletAddress: users.walletAddress,\n        totalScore: users.totalScore,\n        levelsCompleted: users.levelsCompleted,\n        highestLevel: users.highestLevel,\n        gamesPlayed: users.gamesPlayed,\n        consecutiveDays: users.consecutiveDays,\n        totalPlayTimeMinutes: users.totalPlayTimeMinutes,\n        achievementPoints: users.achievementPoints,\n        averageScorePerLevel: users.averageScorePerLevel,\n        isEligibleForRewards: users.isEligibleForRewards,\n        createdAt: users.createdAt,\n        lastLoginAt: users.lastLoginAt\n      })\n      .from(users)\n      .where(eq(users.isEligibleForRewards, true))\n      .orderBy(desc(users.totalScore));\n    \n    return result;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":9483},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger, type ServerOptions } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions: ServerOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2409},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, date, real } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  walletAddress: text(\"wallet_address\").notNull().unique(),\n  username: text(\"username\").notNull(),\n  pin: text(\"pin\").notNull(), // Store hashed PIN\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  lastLoginAt: timestamp(\"last_login_at\").defaultNow(),\n  // User statistics for airdrop decisions\n  totalScore: integer(\"total_score\").default(0),\n  levelsCompleted: integer(\"levels_completed\").default(0),\n  highestLevel: integer(\"highest_level\").default(1),\n  gamesPlayed: integer(\"games_played\").default(0),\n  consecutiveDays: integer(\"consecutive_days\").default(1),\n  totalPlayTimeMinutes: integer(\"total_play_time_minutes\").default(0),\n  averageScorePerLevel: real(\"average_score_per_level\").default(0),\n  achievementPoints: integer(\"achievement_points\").default(0),\n  isEligibleForRewards: boolean(\"is_eligible_for_rewards\").default(true),\n});\n\nexport const gameScores = pgTable(\"game_scores\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  level: integer(\"level\").notNull(),\n  score: integer(\"score\").notNull(),\n  completed: boolean(\"completed\").default(false),\n  playTimeSeconds: integer(\"play_time_seconds\").default(0),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const gameSessions = pgTable(\"game_sessions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  startTime: timestamp(\"start_time\").defaultNow(),\n  endTime: timestamp(\"end_time\"),\n  totalPlayTimeMinutes: integer(\"total_play_time_minutes\").default(0),\n  levelsPlayed: integer(\"levels_played\").default(0),\n  date: date(\"date\").defaultNow(),\n});\n\nexport const userAchievements = pgTable(\"user_achievements\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  achievementType: text(\"achievement_type\").notNull(), // e.g., \"COMPLETE_5_LEVELS\", \"SCORE_10K\", \"PLAY_7_DAYS\"\n  achievementName: text(\"achievement_name\").notNull(),\n  pointsAwarded: integer(\"points_awarded\").default(0),\n  unlockedAt: timestamp(\"unlocked_at\").defaultNow(),\n});\n\nexport const leaderboards = pgTable(\"leaderboards\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  leaderboardType: text(\"leaderboard_type\").notNull(), // \"daily\", \"weekly\", \"all_time\"\n  score: integer(\"score\").notNull(),\n  level: integer(\"level\").notNull(),\n  rank: integer(\"rank\"),\n  periodDate: date(\"period_date\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  walletAddress: true,\n  username: true,\n  pin: true,\n});\n\nexport const insertScoreSchema = createInsertSchema(gameScores).pick({\n  userId: true,\n  level: true,\n  score: true,\n  completed: true,\n  playTimeSeconds: true,\n});\n\nexport const insertSessionSchema = createInsertSchema(gameSessions).pick({\n  userId: true,\n  totalPlayTimeMinutes: true,\n  levelsPlayed: true,\n});\n\nexport const insertAchievementSchema = createInsertSchema(userAchievements).pick({\n  userId: true,\n  achievementType: true,\n  achievementName: true,\n  pointsAwarded: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertScore = z.infer<typeof insertScoreSchema>;\nexport type GameScore = typeof gameScores.$inferSelect;\nexport type InsertSession = z.infer<typeof insertSessionSchema>;\nexport type GameSession = typeof gameSessions.$inferSelect;\nexport type InsertAchievement = z.infer<typeof insertAchievementSchema>;\nexport type UserAchievement = typeof userAchievements.$inferSelect;\nexport type Leaderboard = typeof leaderboards.$inferSelect;\n","size_bytes":3908},"client/src/App.tsx":{"content":"import React, { useState } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { WalletProvider } from './components/WalletProvider';\nimport { Game } from './components/Game';\nimport { LandingPage } from './pages/LandingPage';\nimport { Whitepaper } from './pages/Whitepaper';\nimport { Roadmap } from './pages/Roadmap';\nimport './index.css';\n\nfunction App() {\n  const [showGame, setShowGame] = useState(false);\n\n  const handleEnterGame = () => {\n    setShowGame(true);\n  };\n\n  const handleBackToLanding = () => {\n    setShowGame(false);\n  };\n\n  return (\n    <Router>\n      <Routes>\n        {/* Whitepaper route - opens in new window */}\n        <Route path=\"/whitepaper\" element={<Whitepaper />} />\n        \n        {/* Roadmap route - opens in new window */}\n        <Route path=\"/roadmap\" element={<Roadmap />} />\n        \n        {/* Main application route */}\n        <Route path=\"/*\" element={\n          <WalletProvider>\n            <div className=\"w-full h-full\">\n              {!showGame ? (\n                <LandingPage onEnterGame={handleEnterGame} />\n              ) : (\n                <div className=\"relative w-full h-full\">\n                  {/* Back to Landing Button */}\n                  <button\n                    onClick={handleBackToLanding}\n                    className=\"absolute top-4 left-4 z-50 bg-black/50 hover:bg-black/70 text-white px-4 py-2 rounded-lg transition-all duration-200 backdrop-blur-sm border border-white/20\"\n                  >\n                    ← Back to Landing\n                  </button>\n                  <Game />\n                </div>\n              )}\n            </div>\n          </WalletProvider>\n        } />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;","size_bytes":1767},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    width: 100vw;\n    height: 100vh;\n  }\n}\n\n#root {\n  width: 100%;\n  height: 100%;\n  position: fixed;\n}\n\ncanvas {\n  width: 100% !important;\n  height: 100% !important;\n  touch-action: none;\n}","size_bytes":427},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\n// Initialize the React app\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":185},"client/src/components/AuthModal.tsx":{"content":"import React, { useState } from 'react';\nimport { useAuthStore } from '../lib/stores/useWallet';\nimport { Button } from './ui/button';\nimport { Input } from './ui/input';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from './ui/dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\nimport { Label } from './ui/label';\nimport { generateSeedPhrase, validateSeedPhrase, formatSeedPhrase } from '../utils/seedPhraseGenerator';\nimport { isValidSolanaAddress, formatSolanaAddress } from '../utils/solanaValidator';\n\ninterface AuthModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nexport const AuthModal: React.FC<AuthModalProps> = ({ isOpen, onClose }) => {\n    const { login, register } = useAuthStore();\n    const [activeTab, setActiveTab] = useState<'login' | 'register'>('login');\n    \n    // Login form state\n    const [loginWallet, setLoginWallet] = useState('');\n    const [loginSeedPhrase, setLoginSeedPhrase] = useState('');\n    \n    // Register form state\n    const [registerWallet, setRegisterWallet] = useState('');\n    const [registerUsername, setRegisterUsername] = useState('');\n    const [generatedSeedPhrase, setGeneratedSeedPhrase] = useState('');\n    const [confirmSeedPhrase, setConfirmSeedPhrase] = useState('');\n    \n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState('');\n\n    const handleLogin = async (e: React.FormEvent) => {\n        e.preventDefault();\n        if (!loginWallet || !loginSeedPhrase) {\n            setError('Please fill in all fields');\n            return;\n        }\n        \n        if (!isValidSolanaAddress(loginWallet)) {\n            setError('Please enter a valid Solana wallet address');\n            return;\n        }\n        \n        if (!validateSeedPhrase(loginSeedPhrase)) {\n            setError('Please enter a valid 4-word seed phrase');\n            return;\n        }\n        \n        setLoading(true);\n        setError('');\n        \n        const success = await login(loginWallet, formatSeedPhrase(loginSeedPhrase));\n        if (success) {\n            onClose();\n            resetForms();\n        } else {\n            setError('Invalid wallet address or seed phrase');\n        }\n        \n        setLoading(false);\n    };\n\n    const handleRegister = async (e: React.FormEvent) => {\n        e.preventDefault();\n        if (!registerWallet || !registerUsername || !generatedSeedPhrase || !confirmSeedPhrase) {\n            setError('Please fill in all fields');\n            return;\n        }\n        \n        if (!isValidSolanaAddress(registerWallet)) {\n            setError('Please enter a valid Solana wallet address');\n            return;\n        }\n        \n        if (formatSeedPhrase(generatedSeedPhrase) !== formatSeedPhrase(confirmSeedPhrase)) {\n            setError('Seed phrases do not match');\n            return;\n        }\n        \n        if (!validateSeedPhrase(generatedSeedPhrase)) {\n            setError('Generated seed phrase is invalid');\n            return;\n        }\n        \n        setLoading(true);\n        setError('');\n        \n        const success = await register(registerWallet, registerUsername, formatSeedPhrase(generatedSeedPhrase));\n        if (success) {\n            onClose();\n            resetForms();\n        } else {\n            setError('Registration failed. Wallet address may already be in use.');\n        }\n        \n        setLoading(false);\n    };\n\n    const resetForms = () => {\n        setLoginWallet('');\n        setLoginSeedPhrase('');\n        setRegisterWallet('');\n        setRegisterUsername('');\n        setGeneratedSeedPhrase('');\n        setConfirmSeedPhrase('');\n        setError('');\n        setActiveTab('login');\n    };\n    \n    const generateNewSeedPhrase = () => {\n        const newPhrase = generateSeedPhrase();\n        setGeneratedSeedPhrase(newPhrase);\n        setConfirmSeedPhrase('');\n    };\n\n    const formatWalletAddress = (address: string) => {\n        return address.replace(/[^a-zA-Z0-9]/g, '').toUpperCase();\n    };\n\n    return (\n        <Dialog open={isOpen} onOpenChange={onClose}>\n            <DialogContent className=\"sm:max-w-lg bg-amber-900/30 backdrop-blur-md border-amber-500/30 shadow-2xl\" aria-describedby=\"auth-modal-description\">\n                <DialogHeader className=\"text-center pb-6\">\n                    <DialogTitle className=\"text-2xl font-bold text-white\">Welcome</DialogTitle>\n                    <div id=\"auth-modal-description\" className=\"text-sm text-amber-200 mt-2\">\n                        Connect with your Solana wallet and 4-word seed phrase\n                    </div>\n                </DialogHeader>\n                \n                <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'login' | 'register')}>\n                    <TabsList className=\"grid w-full grid-cols-2 bg-amber-800/30 rounded-lg p-1\">\n                        <TabsTrigger value=\"login\" className=\"rounded-md font-medium\">Sign In</TabsTrigger>\n                        <TabsTrigger value=\"register\" className=\"rounded-md font-medium\">Create Account</TabsTrigger>\n                    </TabsList>\n                    \n                    <TabsContent value=\"login\" className=\"space-y-6 mt-6\">\n                        <form onSubmit={handleLogin} className=\"space-y-5\">\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"loginWallet\" className=\"text-sm font-medium text-amber-100\">\n                                    Wallet Address\n                                </Label>\n                                <Input\n                                    id=\"loginWallet\"\n                                    placeholder=\"Enter your wallet address\"\n                                    value={loginWallet}\n                                    onChange={(e) => setLoginWallet(formatWalletAddress(e.target.value))}\n                                    className=\"h-12 font-mono text-sm bg-amber-900/20 border-amber-400/30 text-white placeholder:text-amber-200/60 focus:border-amber-400 focus:ring-amber-400\"\n                                    maxLength={44}\n                                />\n                            </div>\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"loginSeedPhrase\" className=\"text-sm font-medium text-amber-100\">\n                                    4-Word Seed Phrase\n                                </Label>\n                                <Input\n                                    id=\"loginSeedPhrase\"\n                                    type=\"password\"\n                                    placeholder=\"capybara forest golden harmony\"\n                                    value={loginSeedPhrase}\n                                    onChange={(e) => setLoginSeedPhrase(e.target.value)}\n                                    className=\"h-12 font-mono text-sm bg-amber-900/20 border-amber-400/30 text-white placeholder:text-amber-200/60 focus:border-amber-400 focus:ring-amber-400\"\n                                />\n                            </div>\n                            \n                            {error && (\n                                <div className=\"bg-red-900/20 border border-red-400/30 text-red-300 px-4 py-3 rounded-lg text-sm\">\n                                    {error}\n                                </div>\n                            )}\n                            \n                            <Button \n                                type=\"submit\" \n                                className=\"w-full h-12 bg-amber-600 hover:bg-amber-700 text-white font-medium rounded-lg transition-colors\"\n                                disabled={loading}\n                            >\n                                {loading ? 'Signing in...' : 'Sign In'}\n                            </Button>\n                        </form>\n                    </TabsContent>\n                    \n                    <TabsContent value=\"register\" className=\"space-y-6 mt-6\">\n                        <form onSubmit={handleRegister} className=\"space-y-5\">\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"registerWallet\" className=\"text-sm font-medium text-amber-100\">\n                                    Wallet Address\n                                </Label>\n                                <Input\n                                    id=\"registerWallet\"\n                                    placeholder=\"Enter your wallet address\"\n                                    value={registerWallet}\n                                    onChange={(e) => setRegisterWallet(formatWalletAddress(e.target.value))}\n                                    className=\"h-12 font-mono text-sm bg-amber-900/20 border-amber-400/30 text-white placeholder:text-amber-200/60 focus:border-amber-400 focus:ring-amber-400\"\n                                    maxLength={44}\n                                />\n                            </div>\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"registerUsername\" className=\"text-sm font-medium text-amber-100\">\n                                    Username\n                                </Label>\n                                <Input\n                                    id=\"registerUsername\"\n                                    placeholder=\"Choose a username\"\n                                    value={registerUsername}\n                                    onChange={(e) => setRegisterUsername(e.target.value)}\n                                    className=\"h-12 bg-amber-900/20 border-amber-400/30 text-white placeholder:text-amber-200/60 focus:border-amber-400 focus:ring-amber-400\"\n                                    maxLength={20}\n                                />\n                            </div>\n                            <div className=\"space-y-4\">\n                                <div className=\"space-y-2\">\n                                    <Label htmlFor=\"generatedSeedPhrase\" className=\"text-sm font-medium text-amber-100\">\n                                        Your 4-Word Seed Phrase\n                                    </Label>\n                                    <div className=\"flex gap-2\">\n                                        <Input\n                                            id=\"generatedSeedPhrase\"\n                                            value={generatedSeedPhrase}\n                                            readOnly\n                                            className=\"h-12 font-mono text-sm bg-amber-900/40 border-amber-400/30 text-amber-100 cursor-default\"\n                                            placeholder=\"Click Generate to create your phrase\"\n                                        />\n                                        <Button\n                                            type=\"button\"\n                                            onClick={generateNewSeedPhrase}\n                                            className=\"h-12 px-4 bg-emerald-600 hover:bg-emerald-700 text-white font-medium rounded-lg transition-colors\"\n                                        >\n                                            Generate\n                                        </Button>\n                                    </div>\n                                    <p className=\"text-xs text-amber-200/80\">\n                                        Save this phrase securely - you'll need it to sign in!\n                                    </p>\n                                </div>\n                                <div className=\"space-y-2\">\n                                    <Label htmlFor=\"confirmSeedPhrase\" className=\"text-sm font-medium text-amber-100\">\n                                        Confirm Seed Phrase\n                                    </Label>\n                                    <Input\n                                        id=\"confirmSeedPhrase\"\n                                        placeholder=\"Type your seed phrase to confirm\"\n                                        value={confirmSeedPhrase}\n                                        onChange={(e) => setConfirmSeedPhrase(e.target.value)}\n                                        className=\"h-12 font-mono text-sm bg-amber-900/20 border-amber-400/30 text-white placeholder:text-amber-200/60 focus:border-amber-400 focus:ring-amber-400\"\n                                    />\n                                </div>\n                            </div>\n                            \n                            {error && (\n                                <div className=\"bg-red-900/20 border border-red-400/30 text-red-300 px-4 py-3 rounded-lg text-sm\">\n                                    {error}\n                                </div>\n                            )}\n                            \n                            <Button \n                                type=\"submit\" \n                                className=\"w-full h-12 bg-amber-600 hover:bg-amber-700 text-white font-medium rounded-lg transition-colors\"\n                                disabled={loading}\n                            >\n                                {loading ? 'Creating Account...' : 'Create Account'}\n                            </Button>\n                        </form>\n                    </TabsContent>\n                </Tabs>\n            </DialogContent>\n        </Dialog>\n    );\n};","size_bytes":13461},"client/src/components/Game.tsx":{"content":"import React, { useEffect, useRef, useState } from 'react';\nimport Phaser from 'phaser';\nimport { MenuScene } from '../scenes/MenuScene';\nimport { GameScene } from '../scenes/GameScene';\nimport { GameOverScene } from '../scenes/GameOverScene';\nimport { GameUI } from './GameUI';\nimport { useGameState } from '../lib/stores/useGameState';\n\nexport const Game: React.FC = () => {\n    const gameRef = useRef<Phaser.Game | null>(null);\n    const containerRef = useRef<HTMLDivElement>(null);\n    const { currentScene } = useGameState();\n    const [gameInstance, setGameInstance] = useState<Phaser.Game | null>(null);\n\n    useEffect(() => {\n        if (!containerRef.current || gameRef.current) return;\n\n        const config: Phaser.Types.Core.GameConfig = {\n            type: Phaser.AUTO,\n            width: window.innerWidth,\n            height: window.innerHeight,\n            parent: containerRef.current,\n            backgroundColor: '#87CEEB', // Sky blue background\n            render: {\n                premultipliedAlpha: true // Better alpha blending\n            },\n            physics: {\n                default: 'arcade',\n                arcade: {\n                    gravity: { x: 0, y: 0 },\n                    debug: false\n                }\n            },\n            scene: [MenuScene, GameScene, GameOverScene],\n            scale: {\n                mode: Phaser.Scale.RESIZE,\n                autoCenter: Phaser.Scale.CENTER_BOTH\n            },\n            input: {\n                activePointers: 3 // Support multi-touch\n            }\n        };\n\n        const game = new Phaser.Game(config);\n        gameRef.current = game;\n        setGameInstance(game);\n\n        // Handle window resize\n        const handleResize = () => {\n            if (game) {\n                game.scale.resize(window.innerWidth, window.innerHeight);\n            }\n        };\n\n        window.addEventListener('resize', handleResize);\n\n        return () => {\n            window.removeEventListener('resize', handleResize);\n            if (game) {\n                game.destroy(true);\n                gameRef.current = null;\n                setGameInstance(null);\n            }\n        };\n    }, []);\n\n    return (\n        <div className=\"relative w-full h-full\">\n            <div ref={containerRef} className=\"w-full h-full\" />\n            {gameInstance && <GameUI game={gameInstance} />}\n        </div>\n    );\n};\n","size_bytes":2396},"client/src/components/GameOverOverlay.tsx":{"content":"import React from 'react';\nimport { Button } from './ui/button';\nimport { Card, CardContent } from './ui/card';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useGameState } from '../lib/stores/useGameState';\nimport { getNextLevel } from '../lib/levels';\n\ninterface GameOverOverlayProps {\n    won: boolean;\n    onNextLevel: () => void;\n    onRetry: () => void;\n    onBackToMenu: () => void;\n}\n\nexport const GameOverOverlay: React.FC<GameOverOverlayProps> = ({ \n    won, \n    onNextLevel, \n    onRetry, \n    onBackToMenu \n}) => {\n    const { level, score } = useGameState();\n    const hasNextLevel = getNextLevel(level) !== null;\n\n    return (\n        <AnimatePresence>\n            <div className=\"absolute inset-0 flex items-center justify-center bg-black/60 backdrop-blur-sm z-20\">\n                <motion.div\n                    initial={{ scale: 0.8, opacity: 0, y: 50 }}\n                    animate={{ scale: 1, opacity: 1, y: 0 }}\n                    exit={{ scale: 0.8, opacity: 0, y: 50 }}\n                    transition={{ duration: 0.5, ease: \"easeOut\" }}\n                    className=\"flex flex-col items-center max-w-lg mx-4\"\n                >\n                    <Card className={`backdrop-blur-md shadow-2xl border-2 ${\n                        won \n                            ? 'bg-gradient-to-br from-green-500/90 to-emerald-600/90 border-green-400/50' \n                            : 'bg-gradient-to-br from-red-500/90 to-red-600/90 border-red-400/50'\n                    }`}>\n                        <CardContent className=\"p-10 text-center text-white\">\n                            {/* Result Icon & Title */}\n                            <motion.div\n                                initial={{ scale: 0 }}\n                                animate={{ scale: 1 }}\n                                transition={{ delay: 0.2, duration: 0.5, ease: \"backOut\" }}\n                                className=\"mb-6\"\n                            >\n                                <div className={`text-8xl mb-4 ${won ? '🎉' : '💔'}`}>\n                                    {won ? '🎉' : '💔'}\n                                </div>\n                                <h1 className=\"text-4xl md:text-5xl font-bold mb-2\">\n                                    {won ? 'Victory!' : 'Defeat!'}\n                                </h1>\n                                <p className={`text-xl ${won ? 'text-green-100' : 'text-red-100'}`}>\n                                    {won ? 'The capybara is safe!' : 'The bees got through!'}\n                                </p>\n                            </motion.div>\n\n                            {/* Stats */}\n                            <motion.div\n                                initial={{ y: 20, opacity: 0 }}\n                                animate={{ y: 0, opacity: 1 }}\n                                transition={{ delay: 0.4, duration: 0.5 }}\n                                className=\"mb-8 grid grid-cols-2 gap-4 text-center\"\n                            >\n                                <div className=\"bg-white/20 backdrop-blur rounded-xl p-4\">\n                                    <div className=\"text-2xl font-bold\">{score.toLocaleString()}</div>\n                                    <div className=\"text-sm opacity-80\">Final Score</div>\n                                </div>\n                                <div className=\"bg-white/20 backdrop-blur rounded-xl p-4\">\n                                    <div className=\"text-2xl font-bold\">{level}</div>\n                                    <div className=\"text-sm opacity-80\">Level Reached</div>\n                                </div>\n                            </motion.div>\n\n                            {/* Action Buttons */}\n                            <motion.div\n                                initial={{ y: 30, opacity: 0 }}\n                                animate={{ y: 0, opacity: 1 }}\n                                transition={{ delay: 0.6, duration: 0.5 }}\n                                className=\"flex flex-col sm:flex-row gap-4 justify-center\"\n                            >\n                                {won && hasNextLevel && (\n                                    <Button\n                                        onClick={onNextLevel}\n                                        size=\"lg\"\n                                        className=\"bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-semibold px-8 py-4 text-lg rounded-xl shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200\"\n                                    >\n                                        🚀 Next Level\n                                    </Button>\n                                )}\n                                \n                                {!won && (\n                                    <Button\n                                        onClick={onRetry}\n                                        size=\"lg\"\n                                        className=\"bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white font-semibold px-8 py-4 text-lg rounded-xl shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200\"\n                                    >\n                                        🔄 Try Again\n                                    </Button>\n                                )}\n                                \n                                <Button\n                                    onClick={onBackToMenu}\n                                    size=\"lg\"\n                                    variant=\"outline\"\n                                    className=\"bg-white/20 hover:bg-white/30 text-white border-white/30 hover:border-white/50 font-semibold px-8 py-4 text-lg rounded-xl shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200\"\n                                >\n                                    🏠 Main Menu\n                                </Button>\n                            </motion.div>\n\n                            {/* Special message for completing all levels */}\n                            {won && !hasNextLevel && (\n                                <motion.div\n                                    initial={{ opacity: 0 }}\n                                    animate={{ opacity: 1 }}\n                                    transition={{ delay: 0.8, duration: 0.5 }}\n                                    className=\"mt-6 p-4 bg-gradient-to-r from-yellow-400/20 to-yellow-500/20 rounded-xl border border-yellow-300/30\"\n                                >\n                                    <div className=\"text-2xl font-bold text-yellow-200 mb-2\">\n                                        🏆 Congratulations!\n                                    </div>\n                                    <div className=\"text-yellow-100\">\n                                        You've completed all levels and mastered the art of capybara protection!\n                                    </div>\n                                </motion.div>\n                            )}\n                        </CardContent>\n                    </Card>\n                </motion.div>\n            </div>\n        </AnimatePresence>\n    );\n};","size_bytes":7308},"client/src/components/GameUI.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport { useGameState } from '../lib/stores/useGameState';\nimport { useAuthStore } from '../lib/stores/useWallet';\nimport { AuthModal } from './AuthModal';\nimport { MenuOverlay } from './MenuOverlay';\nimport { GameOverOverlay } from './GameOverOverlay';\nimport { Button } from './ui/button';\n\ninterface GameUIProps {\n    game: Phaser.Game;\n}\n\nexport const GameUI: React.FC<GameUIProps> = ({ game }) => {\n    const { currentScene, level, score, timeLeft, ink } = useGameState();\n    const { user, isLoggedIn, logout } = useAuthStore();\n    const [showAuthModal, setShowAuthModal] = useState(false);\n    \n    const handleStartGame = () => {\n        if (game && game.scene) {\n            game.scene.start('GameScene');\n        }\n    };\n    \n    const handleNextLevel = () => {\n        const gameState = useGameState.getState();\n        gameState.setLevel(gameState.level + 1);\n        if (game && game.scene) {\n            game.scene.start('GameScene');\n        }\n    };\n    \n    const handleRetry = () => {\n        const gameState = useGameState.getState();\n        gameState.setScore(Math.max(0, gameState.score - 50)); // Small penalty\n        gameState.setCapybaraAlive(true); // Reset capybara state\n        gameState.setScene('game'); // Ensure scene state is properly set\n        if (game && game.scene) {\n            game.scene.start('GameScene');\n        }\n    };\n    \n    const handleBackToMenu = () => {\n        useGameState.getState().resetGame();\n        if (game && game.scene) {\n            game.scene.start('MenuScene');\n        }\n    };\n\n    const formatWalletAddress = (address: string) => {\n        return `${address.slice(0, 4)}...${address.slice(-4)}`;\n    };\n\n    return (\n        <>\n            {/* Menu Overlay */}\n            {currentScene === 'menu' && (\n                <MenuOverlay onStartGame={handleStartGame} />\n            )}\n            \n            {/* Game Over Overlay */}\n            {currentScene === 'gameover' && (\n                <GameOverOverlay \n                    won={useGameState.getState().capybaraAlive}\n                    onNextLevel={handleNextLevel}\n                    onRetry={handleRetry}\n                    onBackToMenu={handleBackToMenu}\n                />\n            )}\n            \n            <div className=\"absolute inset-0 pointer-events-none\">\n                {/* Account Button - Always visible */}\n                <div className=\"absolute top-6 right-6 pointer-events-auto\">\n                    {isLoggedIn ? (\n                        <div className=\"flex gap-3 items-center\">\n                            <div className=\"bg-white/90 backdrop-blur text-gray-900 px-4 py-2 rounded-lg shadow-lg border border-gray-200\">\n                                <div className=\"flex items-center gap-2\">\n                                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                                    <span className=\"font-medium\">{user?.username}</span>\n                                </div>\n                                <div className=\"text-xs text-gray-500 font-mono\">{formatWalletAddress(user?.walletAddress || '')}</div>\n                            </div>\n                            <Button \n                                variant=\"outline\" \n                                size=\"sm\" \n                                onClick={logout}\n                                className=\"bg-white/90 hover:bg-red-50 text-red-600 border-red-200 hover:border-red-300\"\n                            >\n                                Sign Out\n                            </Button>\n                        </div>\n                    ) : (\n                        <Button \n                            onClick={() => setShowAuthModal(true)}\n                            className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg shadow-lg transition-colors\"\n                        >\n                            Sign In\n                        </Button>\n                    )}\n                </div>\n\n                {/* Enhanced Game HUD - Only during gameplay */}\n                {currentScene === 'game' && (\n                    <div className=\"absolute top-6 left-1/2 transform -translate-x-1/2 flex gap-4\">\n                        <div className=\"bg-gradient-to-br from-blue-600/90 to-blue-800/90 backdrop-blur text-white px-4 py-3 rounded-2xl shadow-2xl border border-blue-400/30\">\n                            <div className=\"text-xs text-blue-200 font-medium mb-1\">Level</div>\n                            <div className=\"font-bold text-2xl text-center\">{level}</div>\n                        </div>\n                        <div className=\"bg-gradient-to-br from-emerald-600/90 to-emerald-800/90 backdrop-blur text-white px-4 py-3 rounded-2xl shadow-2xl border border-emerald-400/30\">\n                            <div className=\"text-xs text-emerald-200 font-medium mb-1\">Score</div>\n                            <div className=\"font-bold text-2xl text-center\">{score.toLocaleString()}</div>\n                        </div>\n                        <div className=\"bg-gradient-to-br from-amber-600/90 to-amber-800/90 backdrop-blur text-white px-4 py-3 rounded-2xl shadow-2xl border border-amber-400/30\">\n                            <div className=\"text-xs text-amber-200 font-medium mb-1\">Time</div>\n                            <div className=\"font-bold text-2xl text-center\">{Math.round(timeLeft)}s</div>\n                        </div>\n                        \n                        {/* Beautiful Ink Progress Bar */}\n                        <div className=\"bg-gradient-to-br from-purple-600/90 to-purple-800/90 backdrop-blur text-white px-4 py-3 rounded-2xl shadow-2xl border border-purple-400/30 min-w-[120px]\">\n                            <div className=\"text-xs text-purple-200 font-medium mb-2\">Magical Ink</div>\n                            <div className=\"relative\">\n                                {/* Background bar */}\n                                <div className=\"w-full h-3 bg-purple-900/50 rounded-full overflow-hidden\">\n                                    {/* Progress bar with color transitions */}\n                                    <div \n                                        className={`h-full rounded-full transition-all duration-300 ${\n                                            ink > 60 ? 'bg-gradient-to-r from-green-400 to-emerald-500' :\n                                            ink > 30 ? 'bg-gradient-to-r from-yellow-400 to-amber-500' :\n                                            'bg-gradient-to-r from-red-400 to-red-600'\n                                        }`}\n                                        style={{ width: `${Math.max(0, ink)}%` }}\n                                    />\n                                    {/* Shine effect */}\n                                    <div className=\"absolute top-0 left-0 w-full h-full bg-gradient-to-r from-transparent via-white/20 to-transparent animate-pulse\" />\n                                </div>\n                                {/* Percentage text */}\n                                <div className=\"text-center mt-1 font-bold text-sm\">{Math.round(ink)}%</div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n\n                {/* Enhanced Instructions - Only during drawing phase */}\n                {currentScene === 'game' && timeLeft > 5 && (\n                    <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 bg-gradient-to-br from-indigo-600/95 to-purple-600/95 backdrop-blur text-white px-8 py-6 rounded-2xl text-center shadow-2xl border border-indigo-400/30 max-w-md\">\n                        <div className=\"text-xl font-bold mb-3 text-yellow-300\">✨ Draw Phase Active ✨</div>\n                        <div className=\"text-lg font-semibold mb-2\">Protect the Capybara!</div>\n                        <div className=\"text-sm text-indigo-100\">Drag to draw magical barriers and use your ink wisely</div>\n                        <div className=\"mt-2 text-xs text-indigo-200\">🖱️ Mouse • 👆 Touch • 🎯 Strategic placement</div>\n                    </div>\n                )}\n\n                {/* Enhanced Survival phase indicator */}\n                {currentScene === 'game' && timeLeft <= 5 && timeLeft > 0 && (\n                    <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 bg-gradient-to-br from-red-500 to-red-700 text-white px-8 py-6 rounded-2xl text-center shadow-2xl border-2 border-red-300 animate-pulse\">\n                        <div className=\"text-2xl font-bold mb-2 text-yellow-300\">🛡️ SURVIVE! 🛡️</div>\n                        <div className=\"text-xl font-bold\">{Math.round(timeLeft)} seconds left</div>\n                        <div className=\"text-sm text-red-100 mt-2\">Your barriers are protecting the capybara!</div>\n                    </div>\n                )}\n\n                {/* Not logged in warning during game */}\n                {currentScene === 'game' && !isLoggedIn && (\n                    <div className=\"absolute top-24 left-1/2 transform -translate-x-1/2 bg-amber-100 text-amber-800 px-4 py-2 rounded-lg text-center text-sm border border-amber-200\">\n                        Sign in to save your scores\n                    </div>\n                )}\n            </div>\n\n            <AuthModal \n                isOpen={showAuthModal} \n                onClose={() => setShowAuthModal(false)} \n            />\n        </>\n    );\n};\n","size_bytes":9534},"client/src/components/MenuOverlay.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Button } from './ui/button';\nimport { motion, AnimatePresence } from 'framer-motion';\nconst backgroundImage = '/images/AAA_capybara_wetland_background_ab88ce49.png';\nconst heroImage = '/images/custom_capybara.png';\nconst barrierImage = '/images/AAA_magical_barrier_UI_b6d0d11f.png';\n\ninterface MenuOverlayProps {\n    onStartGame: () => void;\n}\n\nconst FloatingParticle: React.FC<{ delay: number }> = ({ delay }) => (\n    <motion.div\n        className=\"absolute w-1 h-1 bg-green-300 rounded-full opacity-60\"\n        initial={{ \n            x: Math.random() * window.innerWidth, \n            y: window.innerHeight + 10,\n            opacity: 0 \n        }}\n        animate={{ \n            y: -10,\n            opacity: [0, 0.6, 0],\n            scale: [0.5, 1, 0.5]\n        }}\n        transition={{ \n            duration: 8,\n            delay,\n            repeat: Infinity,\n            repeatDelay: Math.random() * 5,\n            ease: \"linear\"\n        }}\n    />\n);\n\nconst GlowingText: React.FC<{ children: React.ReactNode; className?: string }> = ({ children, className = \"\" }) => (\n    <div className={`relative ${className}`}>\n        <div className=\"absolute inset-0 text-transparent bg-gradient-to-r from-amber-400 via-yellow-300 to-amber-400 bg-clip-text blur-sm\">\n            {children}\n        </div>\n        <div className=\"relative\">{children}</div>\n    </div>\n);\n\nexport const MenuOverlay: React.FC<MenuOverlayProps> = ({ onStartGame }) => {\n    const [isHovered, setIsHovered] = useState(false);\n    const [particles, setParticles] = useState<number[]>([]);\n\n    useEffect(() => {\n        // Generate floating particles\n        const particleArray = Array.from({ length: 20 }, (_, i) => i);\n        setParticles(particleArray);\n    }, []);\n\n    return (\n        <>\n            {/* Background with parallax effect */}\n            <div \n                className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n                style={{ \n                    backgroundImage: `url(${backgroundImage})`,\n                    filter: 'brightness(0.8) contrast(1.1)'\n                }}\n            />\n            \n            {/* Atmospheric overlay */}\n            <div className=\"absolute inset-0 bg-gradient-to-t from-black/40 via-transparent to-black/20\" />\n            \n            {/* Floating particles */}\n            <AnimatePresence>\n                {particles.map(particle => (\n                    <FloatingParticle key={particle} delay={particle * 0.4} />\n                ))}\n            </AnimatePresence>\n            \n            {/* Magical barrier effect */}\n            <div \n                className=\"absolute inset-0 opacity-30 mix-blend-screen\"\n                style={{ \n                    backgroundImage: `url(${barrierImage})`,\n                    backgroundSize: 'cover',\n                    backgroundPosition: 'center',\n                    animation: 'pulse 4s infinite ease-in-out'\n                }}\n            />\n\n            {/* Main content */}\n            <div className=\"absolute inset-0 flex items-center justify-center z-10\">\n                <motion.div\n                    initial={{ scale: 0.5, opacity: 0 }}\n                    animate={{ scale: 1, opacity: 1 }}\n                    transition={{ \n                        duration: 1.2, \n                        ease: [0.25, 0.46, 0.45, 0.94],\n                        staggerChildren: 0.2\n                    }}\n                    className=\"flex flex-col items-center max-w-4xl mx-8 text-center\"\n                >\n                    {/* Hero character */}\n                    <motion.div\n                        initial={{ y: -100, opacity: 0, rotate: -10 }}\n                        animate={{ y: 0, opacity: 1, rotate: 0 }}\n                        transition={{ \n                            duration: 1.5, \n                            delay: 0.3,\n                            type: \"spring\",\n                            stiffness: 100,\n                            damping: 10\n                        }}\n                        whileHover={{ \n                            scale: 1.05,\n                            rotate: 2,\n                            transition: { duration: 0.3 }\n                        }}\n                        className=\"mb-8 relative\"\n                    >\n                        <div className=\"absolute inset-0 bg-gradient-to-br from-yellow-300/30 to-green-300/30 rounded-full blur-2xl scale-150\" />\n                        <img \n                            src={heroImage} \n                            alt=\"Capybara Hero\" \n                            className=\"w-32 h-32 object-contain drop-shadow-2xl relative z-10\"\n                        />\n                        \n                        {/* Floating crown effect */}\n                        <motion.div\n                            className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 text-4xl\"\n                            animate={{ \n                                y: [0, -10, 0],\n                                rotate: [0, 5, -5, 0]\n                            }}\n                            transition={{ \n                                duration: 3,\n                                repeat: Infinity,\n                                ease: \"easeInOut\"\n                            }}\n                        >\n                            ✨\n                        </motion.div>\n                    </motion.div>\n                    \n                    {/* Title */}\n                    <motion.div\n                        initial={{ y: 50, opacity: 0 }}\n                        animate={{ y: 0, opacity: 1 }}\n                        transition={{ delay: 0.5, duration: 0.8 }}\n                        className=\"mb-6\"\n                    >\n                        <GlowingText className=\"text-4xl md:text-5xl font-bold text-white mb-2 leading-tight font-serif\" style={{\n                            textRendering: 'optimizeLegibility',\n                            WebkitFontSmoothing: 'antialiased',\n                            MozOsxFontSmoothing: 'grayscale'\n                        }}>\n                            SAVE THE\n                        </GlowingText>\n                        <GlowingText className=\"text-4xl md:text-6xl font-bold bg-gradient-to-r from-amber-400 via-yellow-300 to-amber-400 bg-clip-text text-transparent leading-tight font-serif\" style={{\n                            textRendering: 'optimizeLegibility',\n                            WebkitFontSmoothing: 'antialiased',\n                            MozOsxFontSmoothing: 'grayscale'\n                        }}>\n                            CAPYBARA\n                        </GlowingText>\n                        \n                        {/* Subtitle */}\n                        <motion.p \n                            className=\"text-lg md:text-xl text-amber-100 mt-4 font-light tracking-wide\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            transition={{ delay: 0.8, duration: 0.6 }}\n                        >\n                            Master the Ancient Art of Protective Drawing\n                        </motion.p>\n                    </motion.div>\n\n                    {/* Game mechanics display */}\n                    <motion.div\n                        initial={{ y: 30, opacity: 0 }}\n                        animate={{ y: 0, opacity: 1 }}\n                        transition={{ delay: 0.9, duration: 0.6 }}\n                        className=\"mb-10 flex gap-8 text-center\"\n                    >\n                        <div className=\"backdrop-blur-md bg-blue-600/30 border-2 border-blue-400/50 rounded-xl p-4 transform hover:scale-105 transition-transform\">\n                            <div className=\"text-2xl mb-1\">⚡</div>\n                            <div className=\"font-bold text-blue-200 text-sm\">DRAW PHASE</div>\n                            <div className=\"text-blue-100 text-xs\">2.5 Seconds</div>\n                        </div>\n                        \n                        <div className=\"backdrop-blur-md bg-red-600/30 border-2 border-red-400/50 rounded-xl p-4 transform hover:scale-105 transition-transform\">\n                            <div className=\"text-2xl mb-1\">🛡️</div>\n                            <div className=\"font-bold text-red-200 text-sm\">SURVIVE PHASE</div>\n                            <div className=\"text-red-100 text-xs\">5 Seconds</div>\n                        </div>\n                    </motion.div>\n\n                    {/* Start button */}\n                    <motion.div\n                        initial={{ scale: 0, rotate: -180 }}\n                        animate={{ scale: 1, rotate: 0 }}\n                        transition={{ \n                            delay: 1.2, \n                            duration: 0.8,\n                            type: \"spring\",\n                            stiffness: 200,\n                            damping: 15\n                        }}\n                    >\n                        <Button\n                            onClick={onStartGame}\n                            onMouseEnter={() => setIsHovered(true)}\n                            onMouseLeave={() => setIsHovered(false)}\n                            className=\"relative group bg-gradient-to-r from-emerald-500 via-green-600 to-emerald-500 hover:from-emerald-400 hover:via-green-500 hover:to-emerald-400 text-white font-bold px-10 py-4 text-xl rounded-2xl shadow-2xl hover:shadow-emerald-500/50 border-2 border-emerald-400 transition-all duration-300 transform hover:scale-110 active:scale-95 overflow-hidden\"\n                        >\n                            {/* Button glow effect */}\n                            <div className=\"absolute inset-0 bg-gradient-to-r from-emerald-400 to-green-400 opacity-0 group-hover:opacity-30 transition-opacity duration-300 blur-xl\" />\n                            \n                            {/* Animated background */}\n                            <motion.div\n                                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent\"\n                                animate={isHovered ? {\n                                    x: ['-100%', '200%'],\n                                    transition: { duration: 0.8, ease: \"easeInOut\" }\n                                } : {}}\n                            />\n                            \n                            <span className=\"relative z-10 flex items-center gap-3\">\n                                <span className=\"text-3xl\">⚔️</span>\n                                <span>BEGIN QUEST</span>\n                                <span className=\"text-3xl\">✨</span>\n                            </span>\n                        </Button>\n                    </motion.div>\n\n                    {/* Instructions */}\n                    <motion.div\n                        initial={{ opacity: 0 }}\n                        animate={{ opacity: 1 }}\n                        transition={{ delay: 1.5, duration: 0.6 }}\n                        className=\"mt-8 text-center text-amber-100/80 text-lg\"\n                    >\n                        <p className=\"font-light tracking-wide\">\n                            Draw magical barriers with your cursor or finger\n                        </p>\n                        <p className=\"text-sm mt-2 text-amber-200/60\">\n                            Wisdom lies in strategic ink usage\n                        </p>\n                    </motion.div>\n                </motion.div>\n            </div>\n\n            <style>{`\n                @keyframes pulse {\n                    0%, 100% { opacity: 0.2; transform: scale(1); }\n                    50% { opacity: 0.4; transform: scale(1.02); }\n                }\n            `}</style>\n        </>\n    );\n};","size_bytes":11871},"client/src/components/WalletProvider.tsx":{"content":"import React, { FC, ReactNode } from 'react';\n\ninterface WalletProviderProps {\n    children: ReactNode;\n}\n\nexport const WalletProvider: FC<WalletProviderProps> = ({ children }) => {\n    return (\n        <>\n            {children}\n        </>\n    );\n};\n","size_bytes":251},"client/src/hooks/use-is-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/lib/gameConfig.ts":{"content":"export const GAME_CONFIG = {\n    // Drawing settings\n    DRAWING_TIME: 4.5, // seconds\n    SURVIVAL_TIME: 5, // seconds\n    INITIAL_INK: 100,\n    \n    // Drawing mechanics\n    BRUSH_SIZE: 8,\n    INK_CONSUMPTION_RATE: 0.1, // ink consumed per pixel drawn (reduced from 0.5)\n    MIN_DRAW_DISTANCE: 2, // minimum distance between draw points (reduced from 5)\n    \n    // Capybara settings\n    CAPYBARA_SIZE: 40,\n    CAPYBARA_COLOR: 0x8B4513, // Brown color\n    \n    // Bee settings\n    BEE_SIZE: 15,\n    BEE_COLOR: 0xFFD700, // Gold color\n    BEE_DETECTION_RADIUS: 20,\n    \n    // Barrier settings\n    BARRIER_COLOR: 0x654321, // Dark brown\n    BARRIER_THICKNESS: 8,\n    \n    // Physics\n    BEE_TURN_SPEED: 2, // radians per second\n    WALL_BOUNCE_FORCE: 50,\n    \n    // Scoring\n    SCORE_PER_LEVEL: 100,\n    SCORE_PER_SECOND_SURVIVED: 10,\n    SCORE_BONUS_MULTIPLIER: 2, // for completing levels with ink remaining\n    \n    // Screen bounds\n    SCREEN_PADDING: 50\n};\n","size_bytes":964},"client/src/lib/levels.ts":{"content":"export interface LevelConfig {\n    id: number;\n    name: string;\n    capybaraPosition: { x: number; y: number };\n    beeSpawns: Array<{\n        x: number;\n        y: number;\n        delay: number; // seconds before spawning\n        speed: number;\n    }>;\n    timeLimit: number; // seconds for survival phase\n    inkLimit: number; // percentage of ink available\n}\n\nexport const levels: LevelConfig[] = [\n    {\n        id: 1,\n        name: \"First Contact\",\n        capybaraPosition: { x: 400, y: 300 },\n        beeSpawns: [\n            { x: 100, y: 100, delay: 0, speed: 50 },\n            { x: 700, y: 100, delay: 1, speed: 50 }\n        ],\n        timeLimit: 5,\n        inkLimit: 100\n    },\n    {\n        id: 2,\n        name: \"Buzzing Trouble\",\n        capybaraPosition: { x: 400, y: 350 },\n        beeSpawns: [\n            { x: 50, y: 150, delay: 0, speed: 60 },\n            { x: 750, y: 150, delay: 0.5, speed: 60 },\n            { x: 400, y: 50, delay: 1.5, speed: 55 }\n        ],\n        timeLimit: 5,\n        inkLimit: 90\n    },\n    {\n        id: 3,\n        name: \"Swarm Alert\",\n        capybaraPosition: { x: 300, y: 300 },\n        beeSpawns: [\n            { x: 100, y: 100, delay: 0, speed: 65 },\n            { x: 700, y: 100, delay: 0, speed: 65 },\n            { x: 100, y: 500, delay: 1, speed: 65 },\n            { x: 700, y: 500, delay: 1, speed: 65 }\n        ],\n        timeLimit: 5,\n        inkLimit: 85\n    },\n    {\n        id: 4,\n        name: \"Corner Trap\",\n        capybaraPosition: { x: 150, y: 150 },\n        beeSpawns: [\n            { x: 400, y: 100, delay: 0, speed: 70 },\n            { x: 500, y: 200, delay: 0.5, speed: 70 },\n            { x: 400, y: 300, delay: 1, speed: 70 },\n            { x: 300, y: 200, delay: 1.5, speed: 70 }\n        ],\n        timeLimit: 5,\n        inkLimit: 80\n    },\n    {\n        id: 5,\n        name: \"Cross Fire\",\n        capybaraPosition: { x: 400, y: 300 },\n        beeSpawns: [\n            { x: 0, y: 300, delay: 0, speed: 75 },\n            { x: 800, y: 300, delay: 0, speed: 75 },\n            { x: 400, y: 0, delay: 1, speed: 75 },\n            { x: 400, y: 600, delay: 1, speed: 75 }\n        ],\n        timeLimit: 5,\n        inkLimit: 75\n    },\n    {\n        id: 6,\n        name: \"Diagonal Danger\",\n        capybaraPosition: { x: 400, y: 300 },\n        beeSpawns: [\n            { x: 100, y: 100, delay: 0, speed: 80 },\n            { x: 700, y: 100, delay: 0.3, speed: 80 },\n            { x: 700, y: 500, delay: 0.6, speed: 80 },\n            { x: 100, y: 500, delay: 0.9, speed: 80 },\n            { x: 400, y: 50, delay: 1.5, speed: 75 }\n        ],\n        timeLimit: 5,\n        inkLimit: 70\n    },\n    {\n        id: 7,\n        name: \"Speed Demons\",\n        capybaraPosition: { x: 300, y: 400 },\n        beeSpawns: [\n            { x: 50, y: 50, delay: 0, speed: 90 },\n            { x: 750, y: 50, delay: 0.2, speed: 90 },\n            { x: 750, y: 550, delay: 0.4, speed: 90 },\n            { x: 50, y: 550, delay: 0.6, speed: 90 },\n            { x: 400, y: 100, delay: 1, speed: 85 },\n            { x: 400, y: 500, delay: 1.2, speed: 85 }\n        ],\n        timeLimit: 5,\n        inkLimit: 65\n    },\n    {\n        id: 8,\n        name: \"Maze Runner\",\n        capybaraPosition: { x: 200, y: 450 },\n        beeSpawns: [\n            { x: 600, y: 100, delay: 0, speed: 70 },\n            { x: 600, y: 200, delay: 0.3, speed: 70 },\n            { x: 600, y: 300, delay: 0.6, speed: 70 },\n            { x: 600, y: 400, delay: 0.9, speed: 70 },\n            { x: 600, y: 500, delay: 1.2, speed: 70 },\n            { x: 100, y: 200, delay: 1.5, speed: 75 }\n        ],\n        timeLimit: 5,\n        inkLimit: 60\n    },\n    {\n        id: 9,\n        name: \"Spiral Attack\",\n        capybaraPosition: { x: 400, y: 300 },\n        beeSpawns: [\n            { x: 200, y: 150, delay: 0, speed: 85 },\n            { x: 600, y: 150, delay: 0.2, speed: 85 },\n            { x: 600, y: 450, delay: 0.4, speed: 85 },\n            { x: 200, y: 450, delay: 0.6, speed: 85 },\n            { x: 300, y: 100, delay: 0.8, speed: 85 },\n            { x: 500, y: 100, delay: 1, speed: 85 },\n            { x: 500, y: 500, delay: 1.2, speed: 85 },\n            { x: 300, y: 500, delay: 1.4, speed: 85 }\n        ],\n        timeLimit: 5,\n        inkLimit: 55\n    },\n    {\n        id: 10,\n        name: \"Chaos Theory\",\n        capybaraPosition: { x: 350, y: 350 },\n        beeSpawns: [\n            { x: 100, y: 100, delay: 0, speed: 95 },\n            { x: 700, y: 100, delay: 0.1, speed: 95 },\n            { x: 700, y: 500, delay: 0.2, speed: 95 },\n            { x: 100, y: 500, delay: 0.3, speed: 95 },\n            { x: 400, y: 50, delay: 0.5, speed: 90 },\n            { x: 750, y: 300, delay: 0.7, speed: 90 },\n            { x: 400, y: 550, delay: 0.9, speed: 90 },\n            { x: 50, y: 300, delay: 1.1, speed: 90 },\n            { x: 250, y: 200, delay: 1.3, speed: 85 },\n            { x: 550, y: 400, delay: 1.5, speed: 85 }\n        ],\n        timeLimit: 5,\n        inkLimit: 50\n    },\n    {\n        id: 11,\n        name: \"The Gauntlet\",\n        capybaraPosition: { x: 400, y: 500 },\n        beeSpawns: [\n            { x: 50, y: 50, delay: 0, speed: 100 },\n            { x: 150, y: 50, delay: 0.1, speed: 100 },\n            { x: 250, y: 50, delay: 0.2, speed: 100 },\n            { x: 350, y: 50, delay: 0.3, speed: 100 },\n            { x: 450, y: 50, delay: 0.4, speed: 100 },\n            { x: 550, y: 50, delay: 0.5, speed: 100 },\n            { x: 650, y: 50, delay: 0.6, speed: 100 },\n            { x: 750, y: 50, delay: 0.7, speed: 100 },\n            { x: 100, y: 150, delay: 1, speed: 95 },\n            { x: 700, y: 150, delay: 1.2, speed: 95 },\n            { x: 200, y: 250, delay: 1.5, speed: 90 },\n            { x: 600, y: 250, delay: 1.7, speed: 90 }\n        ],\n        timeLimit: 5,\n        inkLimit: 45\n    },\n    {\n        id: 12,\n        name: \"Final Swarm\",\n        capybaraPosition: { x: 400, y: 300 },\n        beeSpawns: [\n            // Outer ring\n            { x: 50, y: 50, delay: 0, speed: 110 },\n            { x: 400, y: 25, delay: 0.1, speed: 110 },\n            { x: 750, y: 50, delay: 0.2, speed: 110 },\n            { x: 775, y: 300, delay: 0.3, speed: 110 },\n            { x: 750, y: 550, delay: 0.4, speed: 110 },\n            { x: 400, y: 575, delay: 0.5, speed: 110 },\n            { x: 50, y: 550, delay: 0.6, speed: 110 },\n            { x: 25, y: 300, delay: 0.7, speed: 110 },\n            // Middle ring\n            { x: 150, y: 150, delay: 0.8, speed: 105 },\n            { x: 650, y: 150, delay: 0.9, speed: 105 },\n            { x: 650, y: 450, delay: 1, speed: 105 },\n            { x: 150, y: 450, delay: 1.1, speed: 105 },\n            // Inner ring\n            { x: 250, y: 200, delay: 1.5, speed: 100 },\n            { x: 550, y: 200, delay: 1.6, speed: 100 },\n            { x: 550, y: 400, delay: 1.7, speed: 100 },\n            { x: 250, y: 400, delay: 1.8, speed: 100 }\n        ],\n        timeLimit: 5,\n        inkLimit: 40\n    }\n];\n\nexport const getLevel = (levelId: number): LevelConfig | null => {\n    return levels.find(level => level.id === levelId) || null;\n};\n\nexport const getNextLevel = (currentLevel: number): LevelConfig | null => {\n    return getLevel(currentLevel + 1);\n};\n\nexport const getTotalLevels = (): number => {\n    return levels.length;\n};\n","size_bytes":7303},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nconst getLocalStorage = (key: string): any =>\n  JSON.parse(window.localStorage.getItem(key) || \"null\");\nconst setLocalStorage = (key: string, value: any): void =>\n  window.localStorage.setItem(key, JSON.stringify(value));\n\nexport { getLocalStorage, setLocalStorage };\n","size_bytes":438},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/scenes/GameOverScene.ts":{"content":"import Phaser from 'phaser';\nimport { useGameState } from '../lib/stores/useGameState';\nimport { getNextLevel, getTotalLevels } from '../lib/levels';\n\nexport class GameOverScene extends Phaser.Scene {\n    private won = false;\n    private currentLevel = 1;\n    private score = 0;\n\n    constructor() {\n        super({ key: 'GameOverScene' });\n    }\n\n    create(data: { won: boolean }) {\n        const { width, height } = this.scale;\n        \n        // Update game state\n        useGameState.getState().setScene('gameover');\n        useGameState.getState().setCapybaraAlive(data.won);\n        \n        this.won = data.won;\n        const gameState = useGameState.getState();\n        this.currentLevel = gameState.level;\n        this.score = gameState.score;\n\n        // Use the same beautiful background as the game\n        const background = this.add.image(width / 2, height / 2, 'gameBackground')\n            .setDisplaySize(width, height);\n\n        // Handle resize\n        this.scale.on('resize', this.resize, this);\n        \n        // Create buttons for fallback (though React overlay is primary)\n        this.createButtons();\n    }\n\n    private createButtons() {\n        const { width, height } = this.scale;\n        const buttonY = height * 0.75;\n        \n        if (this.won) {\n            // Check if there's a next level\n            const nextLevel = getNextLevel(this.currentLevel);\n            \n            if (nextLevel) {\n                // Next Level button\n                const nextButton = this.add.rectangle(width / 2 - 120, buttonY, 200, 60, 0x2196F3)\n                    .setInteractive({ useHandCursor: true })\n                    .on('pointerdown', this.nextLevel, this)\n                    .on('pointerover', () => nextButton.setFillStyle(0x42A5F5))\n                    .on('pointerout', () => nextButton.setFillStyle(0x2196F3));\n\n                this.add.text(width / 2 - 120, buttonY, 'Next Level', {\n                    fontSize: '20px',\n                    color: '#FFFFFF',\n                    fontStyle: 'bold'\n                }).setOrigin(0.5);\n            } else {\n                // Game completed!\n                this.add.text(width / 2, height / 2 + 60, 'Congratulations!\\nYou completed all levels!', {\n                    fontSize: '24px',\n                    color: '#FFFFFF',\n                    align: 'center',\n                    stroke: '#000000',\n                    strokeThickness: 2\n                }).setOrigin(0.5);\n            }\n            \n            // Menu button\n            const menuButton = this.add.rectangle(width / 2 + 120, buttonY, 200, 60, 0x9C27B0)\n                .setInteractive({ useHandCursor: true })\n                .on('pointerdown', this.backToMenu, this)\n                .on('pointerover', () => menuButton.setFillStyle(0xAB47BC))\n                .on('pointerout', () => menuButton.setFillStyle(0x9C27B0));\n\n            this.add.text(width / 2 + 120, buttonY, 'Main Menu', {\n                fontSize: '20px',\n                color: '#FFFFFF',\n                fontStyle: 'bold'\n            }).setOrigin(0.5);\n            \n        } else {\n            // Restart button\n            const restartButton = this.add.rectangle(width / 2 - 120, buttonY, 200, 60, 0xFF9800)\n                .setInteractive({ useHandCursor: true })\n                .on('pointerdown', this.restartLevel, this)\n                .on('pointerover', () => restartButton.setFillStyle(0xFFB74D))\n                .on('pointerout', () => restartButton.setFillStyle(0xFF9800));\n\n            this.add.text(width / 2 - 120, buttonY, 'Retry Level', {\n                fontSize: '20px',\n                color: '#FFFFFF',\n                fontStyle: 'bold'\n            }).setOrigin(0.5);\n\n            // Menu button\n            const menuButton = this.add.rectangle(width / 2 + 120, buttonY, 200, 60, 0x9C27B0)\n                .setInteractive({ useHandCursor: true })\n                .on('pointerdown', this.backToMenu, this)\n                .on('pointerover', () => menuButton.setFillStyle(0xAB47BC))\n                .on('pointerout', () => menuButton.setFillStyle(0x9C27B0));\n\n            this.add.text(width / 2 + 120, buttonY, 'Main Menu', {\n                fontSize: '20px',\n                color: '#FFFFFF',\n                fontStyle: 'bold'\n            }).setOrigin(0.5);\n        }\n    }\n\n    private nextLevel() {\n        const gameState = useGameState.getState();\n        const nextLevelNum = this.currentLevel + 1;\n        \n        // Update game state before transitioning\n        gameState.setLevel(nextLevelNum);\n        gameState.setCapybaraAlive(true);\n        gameState.setScene('game');\n        \n        // Play success sound\n        if (this.sound.get('success')) {\n            this.sound.play('success', { volume: 0.3 });\n        }\n        \n        // Clean up before transitioning\n        this.scale.off('resize', this.resize, this);\n        \n        this.scene.start('GameScene');\n    }\n\n    private restartLevel() {\n        // Reset score for retry\n        useGameState.getState().setScore(Math.max(0, this.score - 50)); // Small penalty for retry\n        \n        // Reset capybara alive state before restarting\n        useGameState.getState().setCapybaraAlive(true);\n        \n        this.scene.start('GameScene');\n    }\n\n    private backToMenu() {\n        useGameState.getState().resetGame();\n        this.scene.start('MenuScene');\n    }\n\n    private resize(gameSize: Phaser.Structs.Size) {\n        // Handle responsive resizing if needed\n    }\n}\n","size_bytes":5501},"client/src/scenes/GameScene.ts":{"content":"import Phaser from 'phaser';\nimport { useGameState } from '../lib/stores/useGameState';\nimport { useAuthStore } from '../lib/stores/useWallet';\nimport { getLevel } from '../lib/levels';\nimport { GAME_CONFIG } from '../lib/gameConfig';\n\ninterface Bee {\n    sprite: Phaser.GameObjects.Rectangle;\n    speed: number;\n    targetX: number;\n    targetY: number;\n    active: boolean;\n}\n\nexport class GameScene extends Phaser.Scene {\n    private capybara!: Phaser.GameObjects.Graphics;\n    private bees: Bee[] = [];\n    private barriers: Phaser.GameObjects.Graphics[] = [];\n    private barrierPoints: Array<{x1: number, y1: number, x2: number, y2: number}> = [];\n    private currentBarrier: Phaser.GameObjects.Graphics | null = null;\n    \n    private gameTimer!: Phaser.Time.TimerEvent;\n    private isDrawingPhase = true;\n    private currentInk = 100;\n    private lastDrawPoint: { x: number; y: number } | null = null;\n    \n    private currentLevel = 1;\n    private isGameActive = false;\n    private skyBackground!: Phaser.GameObjects.Image;\n    private grassBackground!: Phaser.GameObjects.TileSprite;\n    private scaleListener?: () => void;\n\n    constructor() {\n        super({ key: 'GameScene' });\n    }\n\n    create() {\n        const { width, height } = this.scale;\n        \n        // Update game state\n        useGameState.getState().setScene('game');\n        \n        // Initialize level\n        this.currentLevel = useGameState.getState().level;\n        const levelConfig = getLevel(this.currentLevel);\n        \n        if (!levelConfig) {\n            console.error('Level not found:', this.currentLevel);\n            this.scene.start('MenuScene');\n            return;\n        }\n\n        // Beautiful seamless game background\n        this.skyBackground = this.add.image(width / 2, height / 2, 'gameBackground')\n            .setDisplaySize(width, height);\n\n        // Create capybara\n        this.createCapybara(levelConfig.capybaraPosition.x, levelConfig.capybaraPosition.y);\n        \n        // Setup input for drawing\n        this.setupDrawingInput();\n        \n        // Initialize game state\n        this.currentInk = levelConfig.inkLimit;\n        useGameState.getState().setInk(this.currentInk);\n        useGameState.getState().setTimeLeft(GAME_CONFIG.DRAWING_TIME + GAME_CONFIG.SURVIVAL_TIME);\n        useGameState.getState().setCapybaraAlive(true);\n        \n        // Start game timer\n        this.startGameTimer(levelConfig);\n        \n        // Handle resize\n        this.scaleListener = () => this.resize();\n        this.scale.on('resize', this.scaleListener);\n        \n        this.isGameActive = true;\n    }\n\n    private createCapybara(x: number, y: number) {\n        // Create balanced capybara sprite - good detail but appropriately sized\n        this.capybara = this.add.image(x, y, 'capybaraSprite')\n            .setScale(0.15) // Good size for gameplay while maintaining visual appeal\n            .setDepth(10) as any;\n        \n        // Add subtle glow effect\n        const glow = this.add.circle(x, y, 25, 0xffeb3b, 0.2)\n            .setDepth(9);\n        \n        // Gentle floating animation\n        this.tweens.add({\n            targets: this.capybara,\n            y: y - 5,\n            duration: 2000,\n            ease: 'Sine.easeInOut',\n            yoyo: true,\n            repeat: -1\n        });\n        \n        // Store reference for collision detection\n        (this.capybara as any).originalX = x;\n        (this.capybara as any).originalY = y;\n    }\n\n    private setupDrawingInput() {\n        this.input.on('pointerdown', this.startDrawing, this);\n        this.input.on('pointermove', this.continueDrawing, this);\n        this.input.on('pointerup', this.stopDrawing, this);\n    }\n\n    private startDrawing(pointer: Phaser.Input.Pointer) {\n        if (!this.isDrawingPhase) return;\n        \n        this.currentBarrier = this.add.graphics();\n        this.currentBarrier.lineStyle(8, 0x4ade80, 1.0); // Even thicker, fully opaque green barrier\n        this.currentBarrier.setDepth(5); // Ensure barriers are visible\n        this.barriers.push(this.currentBarrier);\n        \n        // Add a subtle glow effect to make barriers more visible\n        this.currentBarrier.lineStyle(12, 0x4ade80, 0.3); // Outer glow layer\n        \n        this.lastDrawPoint = { x: pointer.x, y: pointer.y };\n        useGameState.getState().setIsDrawing(true);\n    }\n\n    private continueDrawing(pointer: Phaser.Input.Pointer) {\n        // Allow drawing even with low ink, just consume what's available\n        if (!this.isDrawingPhase || !this.currentBarrier || !this.lastDrawPoint) return;\n        \n        const distance = Phaser.Math.Distance.Between(\n            this.lastDrawPoint.x, this.lastDrawPoint.y,\n            pointer.x, pointer.y\n        );\n        \n        if (distance < GAME_CONFIG.MIN_DRAW_DISTANCE) return;\n        \n        // Store barrier segment for collision detection\n        this.barrierPoints.push({\n            x1: this.lastDrawPoint.x,\n            y1: this.lastDrawPoint.y,\n            x2: pointer.x,\n            y2: pointer.y\n        });\n        \n        // Draw line segment with glow effect\n        // Outer glow\n        this.currentBarrier.lineStyle(12, 0x4ade80, 0.3);\n        this.currentBarrier.lineBetween(\n            this.lastDrawPoint.x, this.lastDrawPoint.y,\n            pointer.x, pointer.y\n        );\n        \n        // Main line\n        this.currentBarrier.lineStyle(8, 0x4ade80, 1.0);\n        this.currentBarrier.lineBetween(\n            this.lastDrawPoint.x, this.lastDrawPoint.y,\n            pointer.x, pointer.y\n        );\n        \n        // Consume ink only if available\n        if (this.currentInk > 0) {\n            const inkToConsume = Math.min(distance * GAME_CONFIG.INK_CONSUMPTION_RATE, this.currentInk);\n            this.currentInk -= inkToConsume;\n            this.currentInk = Math.max(0, this.currentInk);\n            useGameState.getState().setInk(this.currentInk);\n        }\n        \n        this.lastDrawPoint = { x: pointer.x, y: pointer.y };\n        \n        // Continue drawing even with 0 ink, but don't consume more ink\n    }\n\n    private stopDrawing() {\n        this.currentBarrier = null;\n        this.lastDrawPoint = null;\n        useGameState.getState().setIsDrawing(false);\n    }\n\n    private startGameTimer(levelConfig: any) {\n        let timeRemaining = GAME_CONFIG.DRAWING_TIME + GAME_CONFIG.SURVIVAL_TIME;\n        \n        this.gameTimer = this.time.addEvent({\n            delay: 100, // Update every 100ms\n            callback: () => {\n                timeRemaining -= 0.1;\n                useGameState.getState().setTimeLeft(Math.max(0, timeRemaining));\n                \n                // Switch to survival phase\n                if (timeRemaining <= GAME_CONFIG.SURVIVAL_TIME && this.isDrawingPhase) {\n                    this.isDrawingPhase = false;\n                    console.log(\"Switching to survival phase, spawning bees. Total barriers:\", this.barriers.length);\n                    this.spawnBees(levelConfig);\n                }\n                \n                // Game over\n                if (timeRemaining <= 0) {\n                    this.endGame(true); // Survived!\n                }\n            },\n            repeat: -1\n        });\n    }\n\n    private spawnBees(levelConfig: any) {\n        levelConfig.beeSpawns.forEach((spawn: any) => {\n            this.time.delayedCall(spawn.delay * 1000, () => {\n                this.createBee(spawn.x, spawn.y, spawn.speed);\n            });\n        });\n    }\n\n    private createBee(x: number, y: number, speed: number) {\n        // Create balanced bee sprite - appealing but properly sized\n        const beeSprite = this.add.image(x, y, 'beeSprite')\n            .setScale(0.12) // Good size for gameplay while maintaining charm\n            .setDepth(8);\n        \n        // Add wing flutter animation\n        this.tweens.add({\n            targets: beeSprite,\n            scaleX: 0.11,\n            scaleY: 0.13,\n            duration: 150,\n            ease: 'Sine.easeInOut',\n            yoyo: true,\n            repeat: -1\n        });\n        \n        // Add subtle buzzing movement\n        this.tweens.add({\n            targets: beeSprite,\n            angle: { from: -3, to: 3 },\n            duration: 400,\n            ease: 'Sine.easeInOut',\n            yoyo: true,\n            repeat: -1\n        });\n        \n        const bee: Bee = {\n            sprite: beeSprite as any,\n            speed: speed,\n            targetX: (this.capybara as any).originalX || this.capybara.x,\n            targetY: (this.capybara as any).originalY || this.capybara.y,\n            active: true\n        };\n        \n        this.bees.push(bee);\n    }\n\n    update() {\n        if (!this.isGameActive) return;\n        \n        // Update bees\n        this.bees.forEach(bee => {\n            if (!bee.active) return;\n            \n            // Move towards capybara\n            const angle = Phaser.Math.Angle.Between(\n                bee.sprite.x, bee.sprite.y,\n                this.capybara.x, this.capybara.y\n            );\n            \n            const deltaX = Math.cos(angle) * bee.speed * 0.016; // 60fps assumption\n            const deltaY = Math.sin(angle) * bee.speed * 0.016;\n            \n            // Check for barrier collision before moving\n            const newX = bee.sprite.x + deltaX;\n            const newY = bee.sprite.y + deltaY;\n            \n            if (!this.checkBarrierCollision(newX, newY)) {\n                bee.sprite.x = newX;\n                bee.sprite.y = newY;\n            } else {\n                // Bounce off barrier - try alternative path\n                const bounceAngle = angle + Math.PI/3; // 60 degree deflection\n                const bounceX = bee.sprite.x + Math.cos(bounceAngle) * bee.speed * 0.008;\n                const bounceY = bee.sprite.y + Math.sin(bounceAngle) * bee.speed * 0.008;\n                \n                // Check if bounce path is clear\n                if (!this.checkBarrierCollision(bounceX, bounceY)) {\n                    bee.sprite.x = bounceX;\n                    bee.sprite.y = bounceY;\n                }\n                // If bounce path is also blocked, bee stays in place this frame\n            }\n            \n            // Check if bee reached capybara\n            const distanceToCapybara = Phaser.Math.Distance.Between(\n                bee.sprite.x, bee.sprite.y,\n                this.capybara.x, this.capybara.y\n            );\n            \n            if (distanceToCapybara < 20) { // Much smaller detection radius\n                this.endGame(false); // Capybara was caught!\n            }\n        });\n    }\n\n    private checkBarrierCollision(x: number, y: number): boolean {\n        const checkRadius = 15; // Detection radius around bee position\n        \n        // Check against all drawn barrier line segments\n        for (const segment of this.barrierPoints) {\n            const distance = this.distanceToLineSegment(x, y, segment.x1, segment.y1, segment.x2, segment.y2);\n            \n            if (distance < checkRadius) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    private distanceToLineSegment(px: number, py: number, x1: number, y1: number, x2: number, y2: number): number {\n        const A = px - x1;\n        const B = py - y1;\n        const C = x2 - x1;\n        const D = y2 - y1;\n        \n        const dot = A * C + B * D;\n        const lenSq = C * C + D * D;\n        \n        if (lenSq === 0) {\n            // Line segment is a point\n            return Math.sqrt(A * A + B * B);\n        }\n        \n        let param = dot / lenSq;\n        \n        let xx, yy;\n        \n        if (param < 0) {\n            xx = x1;\n            yy = y1;\n        } else if (param > 1) {\n            xx = x2;\n            yy = y2;\n        } else {\n            xx = x1 + param * C;\n            yy = y1 + param * D;\n        }\n        \n        const dx = px - xx;\n        const dy = py - yy;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    private endGame(won: boolean) {\n        this.isGameActive = false;\n        \n        if (this.gameTimer) {\n            this.gameTimer.destroy();\n        }\n        \n        // Calculate score\n        let score = useGameState.getState().score;\n        if (won) {\n            score += GAME_CONFIG.SCORE_PER_LEVEL;\n            score += Math.floor(this.currentInk) * 2; // Bonus for leftover ink\n            \n            // Play success sound\n            if (this.sound.get('success')) {\n                this.sound.play('success', { volume: 0.5 });\n            }\n        } else {\n            // Play hit sound\n            if (this.sound.get('hit')) {\n                this.sound.play('hit', { volume: 0.5 });\n            }\n        }\n        \n        useGameState.getState().setScore(score);\n        useGameState.getState().setCapybaraAlive(won);\n        \n        // Submit score if wallet connected\n        this.submitScore(won);\n        \n        // Transition to game over scene\n        this.time.delayedCall(1000, () => {\n            this.scene.start('GameOverScene', { won });\n        });\n    }\n\n    private async submitScore(won: boolean) {\n        const user = useAuthStore.getState().user;\n        if (!user) return;\n        \n        const gameState = useGameState.getState();\n        \n        try {\n            await fetch('/api/submit-score', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    walletAddress: user.walletAddress,\n                    level: gameState.level,\n                    score: gameState.score,\n                    completed: won\n                })\n            });\n        } catch (error) {\n            console.log('Score submission failed:', error);\n        }\n    }\n\n    private resize() {\n        // Handle responsive resizing\n        const { width, height } = this.scale;\n        \n        // Resize background\n        if (this.skyBackground) {\n            this.skyBackground.setDisplaySize(width, height);\n            this.skyBackground.setPosition(width / 2, height / 2);\n        }\n        \n        // Ensure game elements stay within bounds\n        if (this.capybara) {\n            this.capybara.x = Math.min(Math.max(this.capybara.x, 50), width - 50);\n            this.capybara.y = Math.min(Math.max(this.capybara.y, 50), height - 50);\n        }\n    }\n    \n    shutdown() {\n        // Clean up event listeners\n        if (this.scaleListener) {\n            this.scale.off('resize', this.scaleListener);\n        }\n        super.shutdown();\n    }\n}\n","size_bytes":14565},"client/src/scenes/MenuScene.ts":{"content":"import Phaser from 'phaser';\nimport { useGameState } from '../lib/stores/useGameState';\n\nexport class MenuScene extends Phaser.Scene {\n    private startButton!: Phaser.GameObjects.Graphics;\n    private titleText!: Phaser.GameObjects.Text;\n    private instructionText!: Phaser.GameObjects.Text;\n    private skyBackground!: Phaser.GameObjects.TileSprite;\n    private grassBackground!: Phaser.GameObjects.TileSprite;\n    private buttonText!: Phaser.GameObjects.Text;\n\n    constructor() {\n        super({ key: 'MenuScene' });\n    }\n\n    create() {\n        const { width, height } = this.scale;\n        \n        // Update game state\n        useGameState.getState().setScene('menu');\n\n        // Layered background with textures\n        this.skyBackground = this.add.tileSprite(0, 0, width, height, 'sky')\n            .setOrigin(0, 0)\n            .setTint(0xe0f2fe); // Light blue tint\n        \n        this.grassBackground = this.add.tileSprite(0, height - 100, width, 100, 'grass')\n            .setOrigin(0, 0)\n            .setTint(0x86efac); // Light green tint\n\n        // Simple title\n        this.titleText = this.add.text(width / 2, height / 3, 'Save the Capybara', {\n            fontSize: '48px',\n            color: '#1f2937',\n            fontStyle: 'bold',\n            fontFamily: 'Arial, sans-serif'\n        }).setOrigin(0.5);\n\n        // Clean instructions\n        this.instructionText = this.add.text(width / 2, height / 2, \n            'Draw barriers to protect the capybara from bees\\n\\n' +\n            'Phase 1: Draw (2.5 seconds)\\n' +\n            'Phase 2: Survive (5 seconds)', {\n            fontSize: '18px',\n            color: '#6b7280',\n            align: 'center',\n            lineSpacing: 4,\n            fontFamily: 'Arial, sans-serif'\n        }).setOrigin(0.5);\n\n        // Hidden button (replaced by React overlay)\n        // this.startButton = this.add.graphics();\n        // this.buttonText = this.add.text(...);\n        // Button functionality moved to React MenuOverlay component\n\n        // Handle resize\n        this.scale.on('resize', this.resize, this);\n    }\n\n    private startGame() {\n        // Play start sound if available\n        if (this.sound.get('success')) {\n            this.sound.play('success', { volume: 0.3 });\n        }\n        \n        this.scene.start('GameScene');\n    }\n\n    private resize(gameSize: Phaser.Structs.Size) {\n        const { width, height } = gameSize;\n        \n        // Resize backgrounds\n        if (this.skyBackground) {\n            this.skyBackground.setSize(width, height);\n        }\n        \n        if (this.grassBackground) {\n            this.grassBackground.setSize(width, 100);\n            this.grassBackground.setPosition(0, height - 100);\n        }\n        \n        // Reposition elements\n        if (this.titleText) {\n            this.titleText.setPosition(width / 2, height / 3);\n        }\n        \n        if (this.instructionText) {\n            this.instructionText.setPosition(width / 2, height / 2);\n        }\n        \n        // Button removed - using React overlay instead\n        // No button resize logic needed\n    }\n\n    preload() {\n        // Load textures\n        this.load.image('sky', '/textures/sky.png');\n        this.load.image('grass', '/textures/grass.png');\n        \n        // Load new game assets\n        this.load.image('gameBackground', '/images/Seamless_wetland_game_background_971a64de.png');\n        this.load.image('capybaraSprite', '/images/custom_capybara.png');\n        this.load.image('beeSprite', '/images/custom_bee.png');\n        \n        // Load sounds\n        this.load.audio('hit', '/sounds/hit.mp3');\n        this.load.audio('success', '/sounds/success.mp3');\n        this.load.audio('background', '/sounds/background.mp3');\n    }\n}\n","size_bytes":3748},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":2001},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4419},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1598},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1140},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1902},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: cn(\n          \"relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md\",\n          props.mode === \"range\"\n            ? \"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md\"\n            : \"[&:has([aria-selected])]:rounded-md\"\n        ),\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-8 w-8 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_start: \"day-range-start\",\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2935},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1828},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1012},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4873},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7224},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3849},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7480},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4132},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1198},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-1 ring-ring\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2143},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":768},"client/src/components/ui/interface.tsx":{"content":"import { useEffect } from \"react\";\nimport { useGame } from \"@/lib/stores/useGame\";\nimport { useAudio } from \"@/lib/stores/useAudio\";\nimport { Button } from \"./button\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"./card\";\nimport { VolumeX, Volume2, RotateCw, Trophy } from \"lucide-react\";\n\nexport function Interface() {\n  const restart = useGame((state) => state.restart);\n  const phase = useGame((state) => state.phase);\n  const { isMuted, toggleMute } = useAudio();\n\n  // Handle clicks on the interface in the ready phase to start the game\n  useEffect(() => {\n    if (phase === \"ready\") {\n      const handleClick = () => {\n        const activeElement = document.activeElement;\n        if (activeElement && 'blur' in activeElement) {\n          (activeElement as HTMLElement).blur();\n        }\n        const event = new KeyboardEvent(\"keydown\", { code: \"Space\" });\n        window.dispatchEvent(event);\n      };\n\n      window.addEventListener(\"click\", handleClick);\n      return () => window.removeEventListener(\"click\", handleClick);\n    }\n  }, [phase]);\n\n  return (\n    <>\n      {/* Top-right corner UI controls */}\n      <div className=\"fixed top-4 right-4 flex gap-2 z-10\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={toggleMute}\n          title={isMuted ? \"Unmute\" : \"Mute\"}\n        >\n          {isMuted ? <VolumeX size={18} /> : <Volume2 size={18} />}\n        </Button>\n        \n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={restart}\n          title=\"Restart Game\"\n        >\n          <RotateCw size={18} />\n        </Button>\n      </div>\n      \n      {/* Game completion overlay */}\n      {phase === \"ended\" && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-20 bg-black/30\">\n          <Card className=\"w-full max-w-md mx-4 shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-center gap-2\">\n                <Trophy className=\"text-yellow-500\" />\n                Level Complete!\n              </CardTitle>\n            </CardHeader>\n            \n            <CardContent>\n              <p className=\"text-center text-muted-foreground\">\n                Congratulations! You successfully navigated the course.\n              </p>\n            </CardContent>\n            \n            <CardFooter className=\"flex justify-center\">\n              <Button onClick={restart} className=\"w-full\">\n                Play Again\n              </Button>\n            </CardFooter>\n          </Card>\n        </div>\n      )}\n      \n      {/* Instructions panel */}\n      <div className=\"fixed bottom-4 left-4 z-10\">\n        <Card className=\"w-auto max-w-xs bg-background/80 backdrop-blur-sm\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-medium mb-2\">Controls:</h3>\n            <ul className=\"text-sm space-y-1 text-muted-foreground\">\n              <li>WASD or Arrow Keys: Move the ball</li>\n              <li>Space: Jump</li>\n              <li>R: Restart game</li>\n              <li>M: Toggle sound</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":3180},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8522},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5124},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1292},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-primary/20\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":792},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1410},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5639},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4280},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\";\n\nimport { useIsMobile } from \"@/hooks/use-is-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value;\n        if (setOpenProp) {\n          setOpenProp(openState);\n        } else {\n          _setOpen(openState);\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n      },\n      [setOpenProp, open],\n    );\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open);\n    }, [isMobile, setOpen, setOpenMobile]);\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault();\n          toggleSidebar();\n        }\n      };\n\n      window.addEventListener(\"keydown\", handleKeyDown);\n      return () => window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [toggleSidebar]);\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\";\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      ],\n    );\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className,\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    );\n  },\n);\nSidebarProvider.displayName = \"SidebarProvider\";\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\";\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className,\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className,\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nSidebar.displayName = \"Sidebar\";\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  );\n});\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarRail.displayName = \"SidebarRail\";\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInset.displayName = \"SidebarInset\";\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInput.displayName = \"SidebarInput\";\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarHeader.displayName = \"SidebarHeader\";\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarFooter.displayName = \"SidebarFooter\";\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  );\n});\nSidebarSeparator.displayName = \"SidebarSeparator\";\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarContent.displayName = \"SidebarContent\";\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroup.displayName = \"SidebarGroup\";\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n));\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n));\nSidebarMenu.displayName = \"SidebarMenu\";\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n));\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    const { isMobile, state } = useSidebar();\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    );\n\n    if (!tooltip) {\n      return button;\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      };\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    );\n  },\n);\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />);\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean;\n    size?: \"sm\" | \"md\";\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","size_bytes":23790},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":266},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1037},"client/src/components/ui/sonner.tsx":{"content":"\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":894},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1148},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2859},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1877},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":649},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1486},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1217},"client/src/lib/stores/useAudio.tsx":{"content":"import { create } from \"zustand\";\n\ninterface AudioState {\n  backgroundMusic: HTMLAudioElement | null;\n  hitSound: HTMLAudioElement | null;\n  successSound: HTMLAudioElement | null;\n  isMuted: boolean;\n  \n  // Setter functions\n  setBackgroundMusic: (music: HTMLAudioElement) => void;\n  setHitSound: (sound: HTMLAudioElement) => void;\n  setSuccessSound: (sound: HTMLAudioElement) => void;\n  \n  // Control functions\n  toggleMute: () => void;\n  playHit: () => void;\n  playSuccess: () => void;\n}\n\nexport const useAudio = create<AudioState>((set, get) => ({\n  backgroundMusic: null,\n  hitSound: null,\n  successSound: null,\n  isMuted: true, // Start muted by default\n  \n  setBackgroundMusic: (music) => set({ backgroundMusic: music }),\n  setHitSound: (sound) => set({ hitSound: sound }),\n  setSuccessSound: (sound) => set({ successSound: sound }),\n  \n  toggleMute: () => {\n    const { isMuted } = get();\n    const newMutedState = !isMuted;\n    \n    // Just update the muted state\n    set({ isMuted: newMutedState });\n    \n    // Log the change\n    console.log(`Sound ${newMutedState ? 'muted' : 'unmuted'}`);\n  },\n  \n  playHit: () => {\n    const { hitSound, isMuted } = get();\n    if (hitSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Hit sound skipped (muted)\");\n        return;\n      }\n      \n      // Clone the sound to allow overlapping playback\n      const soundClone = hitSound.cloneNode() as HTMLAudioElement;\n      soundClone.volume = 0.3;\n      soundClone.play().catch(error => {\n        console.log(\"Hit sound play prevented:\", error);\n      });\n    }\n  },\n  \n  playSuccess: () => {\n    const { successSound, isMuted } = get();\n    if (successSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Success sound skipped (muted)\");\n        return;\n      }\n      \n      successSound.currentTime = 0;\n      successSound.play().catch(error => {\n        console.log(\"Success sound play prevented:\", error);\n      });\n    }\n  }\n}));\n","size_bytes":2025},"client/src/lib/stores/useGame.tsx":{"content":"import { create } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\n\nexport type GamePhase = \"ready\" | \"playing\" | \"ended\";\n\ninterface GameState {\n  phase: GamePhase;\n  \n  // Actions\n  start: () => void;\n  restart: () => void;\n  end: () => void;\n}\n\nexport const useGame = create<GameState>()(\n  subscribeWithSelector((set) => ({\n    phase: \"ready\",\n    \n    start: () => {\n      set((state) => {\n        // Only transition from ready to playing\n        if (state.phase === \"ready\") {\n          return { phase: \"playing\" };\n        }\n        return {};\n      });\n    },\n    \n    restart: () => {\n      set(() => ({ phase: \"ready\" }));\n    },\n    \n    end: () => {\n      set((state) => {\n        // Only transition from playing to ended\n        if (state.phase === \"playing\") {\n          return { phase: \"ended\" };\n        }\n        return {};\n      });\n    }\n  }))\n);\n","size_bytes":893},"client/src/lib/stores/useGameState.ts":{"content":"import { create } from 'zustand';\n\nexport type GameScene = 'menu' | 'game' | 'gameover';\n\ninterface GameState {\n    currentScene: GameScene;\n    level: number;\n    score: number;\n    timeLeft: number;\n    ink: number;\n    isDrawing: boolean;\n    capybaraAlive: boolean;\n    \n    // Actions\n    setScene: (scene: GameScene) => void;\n    setLevel: (level: number) => void;\n    setScore: (score: number) => void;\n    setTimeLeft: (time: number) => void;\n    setInk: (ink: number) => void;\n    setIsDrawing: (drawing: boolean) => void;\n    setCapybaraAlive: (alive: boolean) => void;\n    resetGame: () => void;\n}\n\nexport const useGameState = create<GameState>((set) => ({\n    currentScene: 'menu',\n    level: 1,\n    score: 0,\n    timeLeft: 7.5, // 2.5s drawing + 5s survival\n    ink: 100,\n    isDrawing: false,\n    capybaraAlive: true,\n    \n    setScene: (scene) => set({ currentScene: scene }),\n    setLevel: (level) => set({ level }),\n    setScore: (score) => set({ score }),\n    setTimeLeft: (time) => set({ timeLeft: time }),\n    setInk: (ink) => set({ ink }),\n    setIsDrawing: (drawing) => set({ isDrawing: drawing }),\n    setCapybaraAlive: (alive) => set({ capybaraAlive: alive }),\n    \n    resetGame: () => set({\n        level: 1,\n        score: 0,\n        timeLeft: 7.5,\n        ink: 100,\n        isDrawing: false,\n        capybaraAlive: true\n    })\n}));\n","size_bytes":1360},"client/src/lib/stores/useWallet.ts":{"content":"import { create } from 'zustand';\n\ninterface User {\n    walletAddress: string;\n    username: string;\n    seedPhrase: string;\n}\n\ninterface AuthState {\n    user: User | null;\n    isLoggedIn: boolean;\n    login: (walletAddress: string, seedPhrase: string) => Promise<boolean>;\n    register: (walletAddress: string, username: string, seedPhrase: string) => Promise<boolean>;\n    logout: () => void;\n    setUser: (user: User | null) => void;\n}\n\nexport const useAuthStore = create<AuthState>((set, get) => ({\n    user: null,\n    isLoggedIn: false,\n    \n    login: async (walletAddress: string, seedPhrase: string) => {\n        try {\n            const response = await fetch('/api/login', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ walletAddress, seedPhrase })\n            });\n            \n            if (response.ok) {\n                const userData = await response.json();\n                set({ user: userData.user, isLoggedIn: true });\n                localStorage.setItem('user_session', JSON.stringify(userData.user));\n                return true;\n            }\n            return false;\n        } catch (error) {\n            console.error('Login error:', error);\n            return false;\n        }\n    },\n    \n    register: async (walletAddress: string, username: string, seedPhrase: string) => {\n        try {\n            const response = await fetch('/api/register', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ walletAddress, username, seedPhrase })\n            });\n            \n            if (response.ok) {\n                const userData = await response.json();\n                set({ user: userData.user, isLoggedIn: true });\n                localStorage.setItem('user_session', JSON.stringify(userData.user));\n                return true;\n            }\n            return false;\n        } catch (error) {\n            console.error('Registration error:', error);\n            return false;\n        }\n    },\n    \n    logout: () => {\n        set({ user: null, isLoggedIn: false });\n        localStorage.removeItem('user_session');\n    },\n    \n    setUser: (user: User | null) => {\n        set({ user, isLoggedIn: !!user });\n        if (user) {\n            localStorage.setItem('user_session', JSON.stringify(user));\n        } else {\n            localStorage.removeItem('user_session');\n        }\n    }\n}));\n\n// Initialize from localStorage on app start\nif (typeof window !== 'undefined') {\n    const savedUser = localStorage.getItem('user_session');\n    if (savedUser) {\n        try {\n            const user = JSON.parse(savedUser);\n            useAuthStore.getState().setUser(user);\n        } catch (error) {\n            localStorage.removeItem('user_session');\n        }\n    }\n}\n","size_bytes":2875},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool","size_bytes":298},"server/telegram-bot.ts":{"content":"// Telegram Bot for Save the Capybara Community\n// This file contains the basic structure for a Telegram bot\n\nimport { Bot, InlineKeyboard } from 'grammy';\n\n// You'll need to get a bot token from @BotFather on Telegram\nconst BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;\n\nlet bot: Bot | null = null;\n\nif (!BOT_TOKEN) {\n  console.log('TELEGRAM_BOT_TOKEN not found in environment variables');\n  console.log('Telegram bot will be disabled. To enable it:');\n  console.log('1. Message @BotFather on Telegram');\n  console.log('2. Create a new bot with /newbot');\n  console.log('3. Copy the token to your environment variables');\n} else {\n  console.log('Starting Telegram bot...');\n  \n  bot = new Bot(BOT_TOKEN);\n\n  // Welcome message with interactive buttons\n  bot.command('start', (ctx) => {\n    const keyboard = new InlineKeyboard()\n      .text('🎮 Play Game', 'play')\n      .text('📊 My Stats', 'stats').row()\n      .text('💰 Buy $CAPY', 'buy')\n      .text('🏆 Leaderboard', 'leaderboard').row()\n      .text('📖 Whitepaper', 'whitepaper')\n      .text('🗺️ Roadmap', 'roadmap');\n\n    ctx.reply(\n      `🏛️ Welcome to Save the Capybara! 🏛️\\n\\n` +\n      `The most chill play-to-earn tower defense game on Solana!\\n\\n` +\n      `🎯 Protect cute capybaras by drawing magical barriers\\n` +\n      `💎 Earn $CAPY tokens for your skills\\n` +\n      `🌟 Complete 12 handcrafted levels\\n\\n` +\n      `Choose an option below to get started:`,\n      { reply_markup: keyboard }\n    );\n  });\n\n  // Game link with buttons  \n  const gameUrl = process.env.REPLIT_DEV_DOMAIN ? `https://${process.env.REPLIT_DEV_DOMAIN}` : 'https://save-capybara.replit.app';\n  \n  const handlePlayGame = (ctx: any) => {\n    const keyboard = new InlineKeyboard()\n      .webApp('🎮 Play Now', gameUrl)\n      .text('📱 Mobile Tips', 'mobile_tips').row()\n      .text('🎯 Tutorial', 'tutorial')\n      .text('🔙 Main Menu', 'main_menu');\n\n    ctx.reply(\n      `🎮 Ready to save some capybaras?\\n\\n` +\n      `🏛️ Master the ancient art of protective drawing!\\n\\n` +\n      `💡 How to Play:\\n` +\n      `• ⚡ Draw Phase (2.5s): Draw magical barriers\\n` +\n      `• 🛡️ Survive Phase (5s): Protect the capybara\\n` +\n      `• 🎯 Complete all 12 levels to become a master\\n` +\n      `• 💰 Connect Solana wallet to earn rewards\\n\\n` +\n      `Click 'Play Now' to start your adventure!`,\n      { reply_markup: keyboard }\n    );\n  };\n\n  bot.command('play', handlePlayGame);\n\n  // Player statistics with buttons\n  const handleStats = async (ctx: any) => {\n    const username = ctx.from?.username || 'Player';\n    \n    const keyboard = new InlineKeyboard()\n      .text('🎮 Play Game', 'play')\n      .text('🏆 Leaderboard', 'leaderboard').row()\n      .text('🔄 Refresh Stats', 'stats')\n      .text('🔙 Main Menu', 'main_menu');\n    \n    // In production, fetch real stats from your database\n    ctx.reply(\n      `📊 ${username}'s Capybara Protection Stats:\\n\\n` +\n      `🏆 Total Score: 0 (Connect wallet)\\n` +\n      `🎯 Levels Completed: 0/12\\n` +\n      `⭐ Achievement Points: 0\\n` +\n      `🔥 Current Streak: 0 days\\n` +\n      `💰 $CAPY Earned: 0 tokens\\n` +\n      `🏅 Best Time: -- seconds\\n\\n` +\n      `🔗 Connect your Solana wallet in-game to track real stats!`,\n      { reply_markup: keyboard }\n    );\n  };\n\n  bot.command('stats', handleStats);\n\n  // Leaderboard with buttons\n  const handleLeaderboard = (ctx: any) => {\n    const keyboard = new InlineKeyboard()\n      .text('🎮 Challenge Top Player', 'play')\n      .text('📊 My Stats', 'stats').row()\n      .text('🔄 Refresh Rankings', 'leaderboard')\n      .text('🔙 Main Menu', 'main_menu');\n\n    ctx.reply(\n      `🏆 Top Capybara Protectors (Weekly):\\n\\n` +\n      `🥇 CapyMaster - 15,420 points\\n` +\n      `🥈 BeeStopper - 12,890 points\\n` +\n      `🥉 MagicInk - 11,250 points\\n` +\n      `4️⃣ BarrierKing - 9,870 points\\n` +\n      `5️⃣ QuickDraw - 8,650 points\\n` +\n      `6️⃣ SafeCapy - 7,420 points\\n` +\n      `7️⃣ SpeedRun - 6,890 points\\n\\n` +\n      `🎯 Think you can claim the throne?\\n` +\n      `Play now and prove your skills!`,\n      { reply_markup: keyboard }\n    );\n  };\n\n  bot.command('leaderboard', handleLeaderboard);\n\n  // Token information with buttons\n  const handleBuyToken = (ctx: any) => {\n    const keyboard = new InlineKeyboard()\n      .url('🚀 PumpFun Launch', 'https://pump.fun')\n      .url('📊 DEXTools', 'https://dextools.io').row()\n      .text('📋 Copy Contract', 'copy_contract')\n      .text('🔙 Main Menu', 'main_menu');\n\n    ctx.reply(\n      `💰 $CAPY Token Information:\\n\\n` +\n      `🚀 Launch: Q1 2025 on PumpFun\\n` +\n      `💎 Network: Solana\\n` +\n      `📍 Contract: CapyG4mE7oKr3nQs9vR2bXw8pT5aH6uL9mN3cZ1x (placeholder)\\n\\n` +\n      `🎯 Utilities:\\n` +\n      `• Play-to-earn rewards\\n` +\n      `• Tournament entry & prizes\\n` +\n      `• Exclusive NFT capybara skins\\n` +\n      `• Community governance voting\\n` +\n      `• Staking for bonus rewards\\n\\n` +\n      `⚠️ Always verify official contract address!`,\n      { reply_markup: keyboard }\n    );\n  };\n\n  bot.command('buy', handleBuyToken);\n\n  // Whitepaper\n  bot.command('whitepaper', (ctx) => {\n    ctx.reply(\n      `📖 Save the Capybara Whitepaper\\n\\n` +\n      `Read our comprehensive whitepaper to learn about:\\n` +\n      `• Game mechanics and tokenomics\\n` +\n      `• Our vision for play-to-earn gaming\\n` +\n      `• Technology stack and security\\n` +\n      `• Community governance plans\\n\\n` +\n      `📄 Read here: https://your-game-url.replit.app/whitepaper`\n    );\n  });\n\n  // Roadmap\n  bot.command('roadmap', (ctx) => {\n    ctx.reply(\n      `🗺️ Development Roadmap\\n\\n` +\n      `See what we're building and what's coming next:\\n` +\n      `✅ Phase 1: Foundation & Launch (Completed)\\n` +\n      `🔄 Phase 2: Token Launch & Rewards (Q1 2025)\\n` +\n      `🎯 Phase 3: Community & Expansion (Q2 2025)\\n` +\n      `⭐ Phase 4: Advanced Features (Q3 2025)\\n` +\n      `🚀 Phase 5: Ecosystem Expansion (Q4 2025+)\\n\\n` +\n      `📋 Full roadmap: https://your-game-url.replit.app/roadmap`\n    );\n  });\n\n  // Help command\n  bot.command('help', (ctx) => {\n    ctx.reply(\n      `🤖 Save the Capybara Bot Commands:\\n\\n` +\n      `🎮 Game Commands:\\n` +\n      `/play - Get the game link\\n` +\n      `/stats - View your statistics\\n` +\n      `/leaderboard - Top players\\n\\n` +\n      `📚 Information:\\n` +\n      `/whitepaper - Read our whitepaper\\n` +\n      `/roadmap - Development roadmap\\n` +\n      `/buy - Token information\\n\\n` +\n      `💬 Community:\\n` +\n      `Share screenshots of your best scores!\\n` +\n      `Ask questions about gameplay\\n` +\n      `Suggest new features\\n\\n` +\n      `Happy gaming! 🏛️`\n    );\n  });\n\n  // Whitepaper handler\n  const handleWhitepaper = (ctx: any) => {\n    const keyboard = new InlineKeyboard()\n      .url('📖 Read Full Whitepaper', 'https://save-capybara.replit.app/whitepaper')\n      .text('🔙 Main Menu', 'main_menu');\n\n    ctx.reply(\n      `📖 Save the Capybara Whitepaper\\n\\n` +\n      `📋 What you'll learn:\\n` +\n      `• Complete game mechanics & tokenomics\\n` +\n      `• Our vision for play-to-earn gaming\\n` +\n      `• Technology stack and security measures\\n` +\n      `• Community governance plans\\n` +\n      `• Token utility and distribution\\n\\n` +\n      `💡 Essential reading for serious players!`,\n      { reply_markup: keyboard }\n    );\n  };\n\n  // Roadmap handler\n  const handleRoadmap = (ctx: any) => {\n    const keyboard = new InlineKeyboard()\n      .url('🗺️ View Full Roadmap', 'https://save-capybara.replit.app/roadmap')\n      .text('🔙 Main Menu', 'main_menu');\n\n    ctx.reply(\n      `🗺️ Development Roadmap\\n\\n` +\n      `🚀 Our Journey:\\n` +\n      `✅ Phase 1: Foundation & Launch (Completed)\\n` +\n      `🔄 Phase 2: Token Launch & Rewards (Q1 2025)\\n` +\n      `🎯 Phase 3: Community & Expansion (Q2 2025)\\n` +\n      `⭐ Phase 4: Advanced Features (Q3 2025)\\n` +\n      `🌟 Phase 5: Ecosystem Expansion (Q4 2025+)\\n\\n` +\n      `📅 Track our progress and upcoming features!`,\n      { reply_markup: keyboard }\n    );\n  };\n\n  // Handle callback queries (button presses)\n  bot.on('callback_query:data', async (ctx) => {\n    const data = ctx.callbackQuery.data;\n    \n    switch (data) {\n      case 'play':\n        await handlePlayGame(ctx);\n        break;\n      case 'stats':\n        await handleStats(ctx);\n        break;\n      case 'buy':\n        await handleBuyToken(ctx);\n        break;\n      case 'leaderboard':\n        await handleLeaderboard(ctx);\n        break;\n      case 'whitepaper':\n        await handleWhitepaper(ctx);\n        break;\n      case 'roadmap':\n        await handleRoadmap(ctx);\n        break;\n      case 'copy_contract':\n        await ctx.answerCallbackQuery('Contract copied to clipboard!');\n        await ctx.reply('📋 Contract Address: `CapyG4mE7oKr3nQs9vR2bXw8pT5aH6uL9mN3cZ1x`\\n\\n⚠️ This is a placeholder. Always verify from official sources!', { parse_mode: 'Markdown' });\n        break;\n      case 'mobile_tips':\n        await ctx.answerCallbackQuery();\n        await ctx.reply(\n          `📱 Mobile Gaming Tips:\\n\\n` +\n          `🔥 Performance:\\n` +\n          `• Use landscape mode for better view\\n` +\n          `• Close other apps for smooth gameplay\\n` +\n          `• Ensure stable internet connection\\n\\n` +\n          `✨ Drawing Tips:\\n` +\n          `• Use your finger like a magic wand\\n` +\n          `• Draw smooth, connected barriers\\n` +\n          `• Plan your barriers before drawing\\n` +\n          `• Save ink for emergency patches!`\n        );\n        break;\n      case 'tutorial':\n        await ctx.answerCallbackQuery();\n        await ctx.reply(\n          `🎓 Capybara Protection Tutorial:\\n\\n` +\n          `⚡ Phase 1 - Drawing (2.5s):\\n` +\n          `• Click and drag to draw magical barriers\\n` +\n          `• Barriers block bee movement\\n` +\n          `• Use ink wisely - you have limited supply\\n\\n` +\n          `🛡️ Phase 2 - Survival (5s):\\n` +\n          `• Bees spawn and move toward capybara\\n` +\n          `• Your barriers must hold them off\\n` +\n          `• If capybara is touched, you lose\\n\\n` +\n          `🏆 Victory Conditions:\\n` +\n          `• Keep capybara safe for full 5 seconds\\n` +\n          `• Bonus points for leftover ink\\n` +\n          `• Progress through all 12 levels!`\n        );\n        break;\n      case 'main_menu':\n        await ctx.answerCallbackQuery();\n        // Re-send the main menu\n        const keyboard = new InlineKeyboard()\n          .text('🎮 Play Game', 'play')\n          .text('📊 My Stats', 'stats').row()\n          .text('💰 Buy $CAPY', 'buy')\n          .text('🏆 Leaderboard', 'leaderboard').row()\n          .text('📖 Whitepaper', 'whitepaper')\n          .text('🗺️ Roadmap', 'roadmap');\n\n        await ctx.editMessageText(\n          `🏛️ Save the Capybara Main Menu\\n\\n` +\n          `Choose an option:`,\n          { reply_markup: keyboard }\n        );\n        break;\n      default:\n        await ctx.answerCallbackQuery('Unknown action');\n    }\n  });\n\n  // Handle non-command messages\n  bot.on('message:text', (ctx) => {\n    const text = ctx.message.text.toLowerCase();\n    \n    if (text.includes('hello') || text.includes('hi')) {\n      ctx.reply('Hello! 👋 Type /start to see what I can do!');\n    } else if (text.includes('capybara')) {\n      ctx.reply('🏛️ Did someone say capybara? They need saving! Type /play to start protecting them!');\n    } else if (text.includes('game')) {\n      ctx.reply('🎮 Ready to play? Type /play to get the game link!');\n    } else {\n      ctx.reply('Type /help to see all available commands! 🤖');\n    }\n  });\n\n  // Error handling\n  bot.catch((err) => {\n    console.error('Bot error:', err);\n  });\n\n  // Start the bot\n  bot.start().catch(err => {\n    console.error('Failed to start Telegram bot:', err);\n  });\n}\n\nexport { bot };","size_bytes":11998},"client/src/pages/LandingPage.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Button } from '../components/ui/button';\nimport { Card, CardContent } from '../components/ui/card';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { FileText, ShoppingCart, Map, MessageCircle, Zap } from 'lucide-react';\n\nconst backgroundImage = '/images/AAA_capybara_wetland_background_ab88ce49.png';\nconst heroImage = '/images/custom_capybara.png';\nconst barrierImage = '/images/AAA_magical_barrier_UI_b6d0d11f.png';\n\nconst FloatingParticle: React.FC<{ delay: number }> = ({ delay }) => (\n    <motion.div\n        className=\"absolute w-1 h-1 bg-amber-300 rounded-full opacity-60\"\n        initial={{ \n            x: Math.random() * window.innerWidth, \n            y: window.innerHeight + 10,\n            opacity: 0 \n        }}\n        animate={{ \n            y: -10,\n            opacity: [0, 0.6, 0],\n            scale: [0.5, 1, 0.5]\n        }}\n        transition={{ \n            duration: 8,\n            delay,\n            repeat: Infinity,\n            repeatDelay: Math.random() * 5,\n            ease: \"linear\"\n        }}\n    />\n);\n\nconst GlowingText: React.FC<{ children: React.ReactNode; className?: string }> = ({ children, className = \"\" }) => (\n    <div className={`relative ${className}`}>\n        <div className=\"absolute inset-0 text-transparent bg-gradient-to-r from-amber-400 via-yellow-300 to-amber-400 bg-clip-text blur-[1px]\">\n            {children}\n        </div>\n        <div className=\"relative bg-gradient-to-r from-amber-400 via-yellow-300 to-amber-400 bg-clip-text text-transparent\">{children}</div>\n    </div>\n);\n\ninterface LandingPageProps {\n  onEnterGame: () => void;\n}\n\nexport const LandingPage: React.FC<LandingPageProps> = ({ onEnterGame }) => {\n  const [isHovered, setIsHovered] = useState(false);\n  const [particles, setParticles] = useState<number[]>([]);\n\n  useEffect(() => {\n    // Generate floating particles\n    const particleArray = Array.from({ length: 15 }, (_, i) => i);\n    setParticles(particleArray);\n  }, []);\n\n  const handleWhitepaper = () => {\n    window.open('/whitepaper', '_blank');\n  };\n\n  const handleBuy = () => {\n    // Placeholder for pump.fun link - will be updated when contract address is available\n    alert('Contract address coming soon! Stay tuned to our Telegram for updates.');\n  };\n\n  const handleRoadmap = () => {\n    window.open('/roadmap', '_blank');\n  };\n\n  const handleTelegram = () => {\n    window.open('https://t.me/SaveCapybaraBot', '_blank');\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center relative overflow-hidden\">\n      {/* Game Background */}\n      <div \n        className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n        style={{ \n          backgroundImage: `url(${backgroundImage})`,\n          filter: 'brightness(0.7) contrast(1.1)'\n        }}\n      />\n      \n      {/* Atmospheric overlay */}\n      <div className=\"absolute inset-0 bg-gradient-to-t from-black/50 via-transparent to-black/30\" />\n      \n      {/* Floating particles */}\n      <AnimatePresence>\n        {particles.map(particle => (\n          <FloatingParticle key={particle} delay={particle * 0.4} />\n        ))}\n      </AnimatePresence>\n      \n      {/* Magical barrier effect */}\n      <div \n        className=\"absolute inset-0 opacity-20 mix-blend-screen\"\n        style={{ \n          backgroundImage: `url(${barrierImage})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          animation: 'pulse 4s infinite ease-in-out'\n        }}\n      />\n\n      {/* Main Content */}\n      <div className=\"relative z-10 text-center max-w-4xl mx-auto px-6\">\n        {/* Hero Section */}\n        <motion.div\n          initial={{ opacity: 0, y: 50 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, ease: \"easeOut\" }}\n          className=\"mb-12\"\n        >\n          {/* Hero character */}\n          <motion.div\n            initial={{ y: -100, opacity: 0, rotate: -10 }}\n            animate={{ y: 0, opacity: 1, rotate: 0 }}\n            transition={{ \n              duration: 1.5, \n              delay: 0.2,\n              type: \"spring\",\n              stiffness: 100,\n              damping: 10\n            }}\n            whileHover={{ \n              scale: 1.05,\n              rotate: 2,\n              transition: { duration: 0.3 }\n            }}\n            className=\"mb-8 relative flex justify-center\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-yellow-300/30 to-green-300/30 rounded-full blur-2xl scale-150\" />\n            <div className=\"w-32 h-32 relative z-10\">\n              <img \n                src={heroImage} \n                alt=\"Capybara Hero\" \n                className=\"w-full h-full object-contain drop-shadow-2xl\"\n                style={{\n                  filter: 'drop-shadow(0 0 20px rgba(255, 235, 59, 0.3))'\n                }}\n              />\n            </div>\n            \n            {/* Floating crown effect */}\n            <motion.div\n              className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 text-4xl\"\n              animate={{ \n                y: [0, -10, 0],\n                rotate: [0, 5, -5, 0]\n              }}\n              transition={{ \n                duration: 3,\n                repeat: Infinity,\n                ease: \"easeInOut\"\n              }}\n            >\n              ✨\n            </motion.div>\n          </motion.div>\n          \n          {/* Title */}\n          <div className=\"mb-8\">\n            <GlowingText className=\"text-4xl md:text-5xl font-bold text-white mb-2 leading-tight font-serif\">\n              SAVE THE\n            </GlowingText>\n            <GlowingText className=\"text-4xl md:text-6xl font-bold bg-gradient-to-r from-amber-400 via-yellow-300 to-amber-400 bg-clip-text text-transparent leading-tight font-serif\">\n              CAPYBARA\n            </GlowingText>\n            <motion.p \n              className=\"text-lg md:text-xl text-amber-100 mt-4 font-light tracking-wide max-w-xl mx-auto\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 0.6, duration: 0.6 }}\n            >\n              Master the Ancient Art of Protective Drawing on Solana\n            </motion.p>\n          </div>\n\n          {/* Main Enter Button */}\n          <motion.div\n            initial={{ scale: 0, rotate: -180 }}\n            animate={{ scale: 1, rotate: 0 }}\n            transition={{ \n              delay: 0.8, \n              duration: 0.8,\n              type: \"spring\",\n              stiffness: 200,\n              damping: 15\n            }}\n            className=\"mb-12\"\n          >\n            <Button\n              onClick={onEnterGame}\n              onMouseEnter={() => setIsHovered(true)}\n              onMouseLeave={() => setIsHovered(false)}\n              className=\"relative group bg-gradient-to-r from-emerald-500 via-green-600 to-emerald-500 hover:from-emerald-400 hover:via-green-500 hover:to-emerald-400 text-white font-bold px-12 py-4 text-xl rounded-2xl shadow-2xl hover:shadow-emerald-500/50 border-2 border-emerald-400 transition-all duration-300 transform hover:scale-110 active:scale-95 overflow-hidden\"\n            >\n              {/* Button glow effect */}\n              <div className=\"absolute inset-0 bg-gradient-to-r from-emerald-400 to-green-400 opacity-0 group-hover:opacity-30 transition-opacity duration-300 blur-xl\" />\n              \n              {/* Animated background */}\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent\"\n                animate={isHovered ? {\n                  x: ['-100%', '200%'],\n                  transition: { duration: 0.8, ease: \"easeInOut\" }\n                } : {}}\n              />\n              \n              <span className=\"relative z-10 flex items-center gap-3\">\n                <span className=\"text-3xl\">⚔️</span>\n                <span>ENTER QUEST</span>\n                <span className=\"text-3xl\">✨</span>\n              </span>\n            </Button>\n          </motion.div>\n        </motion.div>\n\n\n        {/* Navigation Buttons */}\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 1.2 }}\n          className=\"flex flex-wrap justify-center gap-4\"\n        >\n          {/* Whitepaper Button */}\n          <Card className=\"bg-amber-900/20 backdrop-blur-md border-amber-500/30 hover:bg-amber-900/30 transition-all duration-300 transform hover:scale-105 hover:shadow-xl\">\n            <CardContent className=\"p-4\">\n              <Button\n                onClick={handleWhitepaper}\n                variant=\"ghost\"\n                className=\"text-amber-100 hover:text-amber-300 flex flex-col items-center gap-2 h-auto p-3\"\n              >\n                <FileText className=\"h-6 w-6\" />\n                <span className=\"text-sm font-semibold\">Whitepaper</span>\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Buy Button */}\n          <Card className=\"bg-emerald-900/20 backdrop-blur-md border-emerald-500/30 hover:bg-emerald-900/30 transition-all duration-300 transform hover:scale-105 hover:shadow-xl\">\n            <CardContent className=\"p-4\">\n              <Button\n                onClick={handleBuy}\n                variant=\"ghost\"\n                className=\"text-emerald-100 hover:text-emerald-300 flex flex-col items-center gap-2 h-auto p-3\"\n              >\n                <ShoppingCart className=\"h-6 w-6\" />\n                <span className=\"text-sm font-semibold\">Buy $CAPY</span>\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Roadmap Button */}\n          <Card className=\"bg-purple-900/20 backdrop-blur-md border-purple-500/30 hover:bg-purple-900/30 transition-all duration-300 transform hover:scale-105 hover:shadow-xl\">\n            <CardContent className=\"p-4\">\n              <Button\n                onClick={handleRoadmap}\n                variant=\"ghost\"\n                className=\"text-purple-100 hover:text-purple-300 flex flex-col items-center gap-2 h-auto p-3\"\n              >\n                <Map className=\"h-6 w-6\" />\n                <span className=\"text-sm font-semibold\">Roadmap</span>\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Telegram Button */}\n          <Card className=\"bg-blue-900/20 backdrop-blur-md border-blue-500/30 hover:bg-blue-900/30 transition-all duration-300 transform hover:scale-105 hover:shadow-xl\">\n            <CardContent className=\"p-4\">\n              <Button\n                onClick={handleTelegram}\n                variant=\"ghost\"\n                className=\"text-blue-100 hover:text-blue-300 flex flex-col items-center gap-2 h-auto p-3\"\n              >\n                <MessageCircle className=\"h-6 w-6\" />\n                <span className=\"text-sm font-semibold\">Telegram Bot</span>\n              </Button>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Instructions */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: 1.5, duration: 0.6 }}\n          className=\"mt-8 text-center text-amber-100/80\"\n        >\n          <p className=\"text-lg font-light tracking-wide\">\n            Draw magical barriers with your cursor or finger\n          </p>\n          <p className=\"text-sm mt-2 text-amber-200/60\">\n            Connect Solana wallet • Play • Earn • Repeat\n          </p>\n        </motion.div>\n      </div>\n      \n      <style>{`\n        @keyframes pulse {\n          0%, 100% { opacity: 0.1; transform: scale(1); }\n          50% { opacity: 0.3; transform: scale(1.02); }\n        }\n      `}</style>\n    </div>\n  );\n};","size_bytes":11836},"client/src/pages/Roadmap.tsx":{"content":"import React from 'react';\nimport { Button } from '../components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';\nimport { ArrowLeft, CheckCircle, Clock, Star, Rocket, Trophy, Users, Zap } from 'lucide-react';\n\nexport const Roadmap: React.FC = () => {\n  const handleBack = () => {\n    window.close();\n  };\n\n  const phases = [\n    {\n      phase: \"Phase 1\",\n      title: \"Foundation & Launch\",\n      status: \"completed\",\n      icon: <CheckCircle className=\"h-6 w-6 text-green-400\" />,\n      timeline: \"Q4 2024\",\n      items: [\n        \"✅ Game core mechanics development\",\n        \"✅ Solana wallet integration\",\n        \"✅ 12 handcrafted levels\",\n        \"✅ Achievement system implementation\",\n        \"✅ User registration and authentication\",\n        \"✅ Basic leaderboards\",\n        \"✅ Community Telegram bot setup\"\n      ]\n    },\n    {\n      phase: \"Phase 2\",\n      title: \"Token Launch & Rewards\",\n      status: \"in-progress\",\n      icon: <Clock className=\"h-6 w-6 text-yellow-400\" />,\n      timeline: \"Q1 2025\",\n      items: [\n        \"🔄 $CAPY token deployment on PumpFun\",\n        \"🔄 Play-to-earn reward system activation\",\n        \"📅 Daily and weekly tournaments\",\n        \"📅 Enhanced anti-cheat measures\",\n        \"📅 Mobile responsive optimization\",\n        \"📅 Social sharing features\",\n        \"📅 Referral reward program\"\n      ]\n    },\n    {\n      phase: \"Phase 3\",\n      title: \"Community & Expansion\",\n      status: \"planned\",\n      icon: <Users className=\"h-6 w-6 text-blue-400\" />,\n      timeline: \"Q2 2025\",\n      items: [\n        \"🎯 Guild system and team battles\",\n        \"🎯 Player-created level editor\",\n        \"🎯 NFT capybara skins and customization\",\n        \"🎯 Cross-platform mobile app launch\",\n        \"🎯 Community governance voting\",\n        \"🎯 Expanded Telegram bot features\",\n        \"🎯 Partnership integrations\"\n      ]\n    },\n    {\n      phase: \"Phase 4\",\n      title: \"Advanced Features\",\n      status: \"planned\",\n      icon: <Star className=\"h-6 w-6 text-purple-400\" />,\n      timeline: \"Q3 2025\",\n      items: [\n        \"⭐ PvP multiplayer battles\",\n        \"⭐ Seasonal events and special levels\",\n        \"⭐ Advanced analytics dashboard\",\n        \"⭐ AI-powered level generation\",\n        \"⭐ VR/AR experimental features\",\n        \"⭐ Cross-chain bridge to Ethereum\",\n        \"⭐ Merchandise and real-world rewards\"\n      ]\n    },\n    {\n      phase: \"Phase 5\",\n      title: \"Ecosystem Expansion\",\n      status: \"future\",\n      icon: <Rocket className=\"h-6 w-6 text-pink-400\" />,\n      timeline: \"Q4 2025 & Beyond\",\n      items: [\n        \"🚀 Save the Capybara franchise expansion\",\n        \"🚀 Developer SDK for third-party levels\",\n        \"🚀 Metaverse integration and virtual worlds\",\n        \"🚀 Educational partnerships and gamification\",\n        \"🚀 Real-world capybara conservation initiatives\",\n        \"🚀 Blockchain gaming conference sponsorships\",\n        \"🚀 Global esports tournament series\"\n      ]\n    }\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return 'border-emerald-400/30 bg-emerald-400/20';\n      case 'in-progress': return 'border-amber-400/30 bg-amber-400/20';\n      case 'planned': return 'border-orange-400/30 bg-orange-400/20';\n      case 'future': return 'border-yellow-400/30 bg-yellow-400/20';\n      default: return 'border-amber-400/20 bg-amber-400/10';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen relative\">\n      {/* Game Background */}\n      <div \n        className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n        style={{ \n          backgroundImage: `url('/images/AAA_capybara_wetland_background_ab88ce49.png')`,\n          filter: 'brightness(0.6) contrast(1.1)'\n        }}\n      />\n      {/* Atmospheric overlay */}\n      <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-black/40\" />\n      \n      <div className=\"relative z-10 container mx-auto px-6 py-8 max-w-6xl\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Button \n            onClick={handleBack} \n            variant=\"outline\" \n            className=\"mb-4 text-amber-100 border-amber-400/30 hover:bg-amber-500/20 backdrop-blur-sm\"\n          >\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back\n          </Button>\n          <h1 className=\"text-4xl md:text-5xl font-bold text-white mb-4\">\n            Development\n            <span className=\"text-amber-300\"> Roadmap</span>\n          </h1>\n          <p className=\"text-xl text-amber-100 max-w-3xl\">\n            Our journey to build the ultimate play-to-earn gaming experience on Solana. \n            Track our progress and see what's coming next.\n          </p>\n        </div>\n\n        {/* Stats Overview */}\n        <div className=\"grid md:grid-cols-4 gap-4 mb-12\">\n          <Card className=\"bg-amber-900/20 backdrop-blur-md border-amber-500/30 hover:bg-amber-900/30 transition-all duration-300 text-center\">\n            <CardContent className=\"p-6\">\n              <Trophy className=\"h-8 w-8 text-yellow-400 mx-auto mb-2\" />\n              <h3 className=\"text-2xl font-bold text-white\">12</h3>\n              <p className=\"text-amber-100\">Levels Complete</p>\n            </CardContent>\n          </Card>\n          <Card className=\"bg-amber-900/20 backdrop-blur-md border-amber-500/30 hover:bg-amber-900/30 transition-all duration-300 text-center\">\n            <CardContent className=\"p-6\">\n              <Users className=\"h-8 w-8 text-blue-400 mx-auto mb-2\" />\n              <h3 className=\"text-2xl font-bold text-white\">1000+</h3>\n              <p className=\"text-amber-100\">Early Players</p>\n            </CardContent>\n          </Card>\n          <Card className=\"bg-amber-900/20 backdrop-blur-md border-amber-500/30 hover:bg-amber-900/30 transition-all duration-300 text-center\">\n            <CardContent className=\"p-6\">\n              <Zap className=\"h-8 w-8 text-purple-400 mx-auto mb-2\" />\n              <h3 className=\"text-2xl font-bold text-white\">5</h3>\n              <p className=\"text-amber-100\">Major Phases</p>\n            </CardContent>\n          </Card>\n          <Card className=\"bg-amber-900/20 backdrop-blur-md border-amber-500/30 hover:bg-amber-900/30 transition-all duration-300 text-center\">\n            <CardContent className=\"p-6\">\n              <Rocket className=\"h-8 w-8 text-pink-400 mx-auto mb-2\" />\n              <h3 className=\"text-2xl font-bold text-white\">Q1 2025</h3>\n              <p className=\"text-amber-100\">Token Launch</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Roadmap Phases */}\n        <div className=\"space-y-8\">\n          {phases.map((phase, index) => (\n            <Card key={index} className={`backdrop-blur-md ${getStatusColor(phase.status)} transition-all duration-300 hover:scale-[1.02]`}>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-white flex items-center gap-3\">\n                    {phase.icon}\n                    <div>\n                      <h2 className=\"text-2xl font-bold\">{phase.phase}: {phase.title}</h2>\n                      <p className=\"text-sm text-amber-200 font-normal\">{phase.timeline}</p>\n                    </div>\n                  </CardTitle>\n                  <div className={`px-3 py-1 rounded-full text-xs font-semibold ${\n                    phase.status === 'completed' ? 'bg-emerald-400/20 text-emerald-300' :\n                    phase.status === 'in-progress' ? 'bg-amber-400/20 text-amber-300' :\n                    phase.status === 'planned' ? 'bg-orange-400/20 text-orange-300' :\n                    'bg-yellow-400/20 text-yellow-300'\n                  }`}>\n                    {phase.status.replace('-', ' ').toUpperCase()}\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  {phase.items.map((item, itemIndex) => (\n                    <div key={itemIndex} className=\"text-amber-50 flex items-start gap-2\">\n                      <span className=\"text-sm mt-1\">{item.substring(0, 2)}</span>\n                      <span className=\"flex-1\">{item.substring(2)}</span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Call to Action */}\n        <Card className=\"mt-12 bg-gradient-to-r from-amber-500/20 to-emerald-500/20 backdrop-blur-md border-amber-400/30\">\n          <CardContent className=\"p-8 text-center\">\n            <h2 className=\"text-3xl font-bold text-white mb-4\">Be Part of Our Journey</h2>\n            <p className=\"text-amber-50 mb-6 max-w-2xl mx-auto\">\n              Join thousands of players already enjoying Save the Capybara. Connect your wallet, \n              start playing, and earn rewards as we build the future of gaming together.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button className=\"bg-gradient-to-r from-amber-500 to-emerald-600 hover:from-amber-600 hover:to-emerald-700 text-white font-bold px-8 py-3\">\n                Start Playing Now\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"text-amber-100 border-amber-300/30 hover:bg-amber-500/20 px-8 py-3\"\n                onClick={() => window.open('https://t.me/SaveCapybaraBot', '_blank')}\n              >\n                Join Telegram Community\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Footer */}\n        <div className=\"mt-12 text-center text-amber-200/70\">\n          <p className=\"text-sm\">\n            Roadmap is subject to change based on community feedback and market conditions.\n            <br />\n            Last updated: January 2025\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};","size_bytes":10065},"client/src/pages/Whitepaper.tsx":{"content":"import React from 'react';\nimport { Button } from '../components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';\nimport { ArrowLeft, Shield, Gamepad2, Coins, Users, Zap, Target } from 'lucide-react';\n\nexport const Whitepaper: React.FC = () => {\n  const handleBack = () => {\n    window.close();\n  };\n\n  return (\n    <div className=\"min-h-screen relative\">\n      {/* Game Background */}\n      <div \n        className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n        style={{ \n          backgroundImage: `url('/images/AAA_capybara_wetland_background_ab88ce49.png')`,\n          filter: 'brightness(0.6) contrast(1.1)'\n        }}\n      />\n      {/* Atmospheric overlay */}\n      <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-black/40\" />\n      \n      <div className=\"relative z-10 container mx-auto px-6 py-8 max-w-4xl\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Button \n            onClick={handleBack} \n            variant=\"outline\" \n            className=\"mb-4 text-amber-100 border-amber-400/30 hover:bg-amber-500/20 backdrop-blur-sm\"\n          >\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back\n          </Button>\n          <h1 className=\"text-4xl md:text-5xl font-bold text-white mb-4\">\n            Save the Capybara\n            <span className=\"text-amber-300\"> Whitepaper</span>\n          </h1>\n          <p className=\"text-xl text-amber-100\">\n            The Future of Play-to-Earn Gaming on Solana\n          </p>\n        </div>\n\n        <div className=\"space-y-8\">\n          {/* Executive Summary */}\n          <Card className=\"bg-amber-900/20 backdrop-blur-md border-amber-500/30 hover:bg-amber-900/30 transition-all duration-300\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Target className=\"h-6 w-6 text-amber-400\" />\n                Executive Summary\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-amber-50 space-y-4\">\n              <p>\n                Save the Capybara is a revolutionary play-to-earn tower defense game built on the Solana blockchain. \n                Players protect adorable capybaras from swarms of bees by drawing strategic barriers, earning rewards \n                based on their performance and skill.\n              </p>\n              <p>\n                Our mission is to create the most engaging and rewarding gaming experience in the Solana ecosystem, \n                combining fun gameplay with real economic value for our community.\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* Game Mechanics */}\n          <Card className=\"bg-amber-900/20 backdrop-blur-md border-amber-500/30 hover:bg-amber-900/30 transition-all duration-300\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Gamepad2 className=\"h-6 w-6 text-emerald-400\" />\n                Game Mechanics\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-amber-50 space-y-4\">\n              <div>\n                <h3 className=\"text-lg font-semibold text-white mb-2\">Drawing Phase (4.5 seconds)</h3>\n                <p>Players use their magical ink to draw protective barriers around the capybara. Strategic placement and efficient ink usage are key to success.</p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold text-white mb-2\">Survival Phase (5 seconds)</h3>\n                <p>Bees attack the capybara, and players must rely on their drawn defenses. Successfully protecting the capybara advances players to the next level.</p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold text-white mb-2\">Progressive Difficulty</h3>\n                <p>12 handcrafted levels with increasing bee numbers, speeds, and spawn patterns challenge players to continuously improve their strategies.</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Tokenomics */}\n          <Card className=\"bg-amber-900/20 backdrop-blur-md border-amber-500/30 hover:bg-amber-900/30 transition-all duration-300\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Coins className=\"h-6 w-6 text-amber-400\" />\n                Tokenomics ($CAPY)\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-amber-50 space-y-4\">\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">Token Distribution</h3>\n                  <ul className=\"space-y-1\">\n                    <li>• 40% - Play-to-Earn Rewards</li>\n                    <li>• 25% - Liquidity Pool</li>\n                    <li>• 20% - Community Treasury</li>\n                    <li>• 10% - Development Team</li>\n                    <li>• 5% - Marketing & Partnerships</li>\n                  </ul>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">Earning Mechanisms</h3>\n                  <ul className=\"space-y-1\">\n                    <li>• Daily achievement rewards</li>\n                    <li>• Weekly tournament prizes</li>\n                    <li>• Level completion bonuses</li>\n                    <li>• Streak multipliers</li>\n                    <li>• Community challenges</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Technology */}\n          <Card className=\"bg-amber-900/20 backdrop-blur-md border-amber-500/30 hover:bg-amber-900/30 transition-all duration-300\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Zap className=\"h-6 w-6 text-yellow-400\" />\n                Technology Stack\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-amber-50 space-y-4\">\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">Blockchain</h3>\n                  <p>Built on Solana for fast, low-cost transactions and seamless user experience.</p>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">Game Engine</h3>\n                  <p>Phaser 3 game engine with React for smooth gameplay and modern UI.</p>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">Wallet Integration</h3>\n                  <p>Support for major Solana wallets including Phantom, Solflare, and Backpack.</p>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">Security</h3>\n                  <p>Smart contract audits and secure player data management with PostgreSQL.</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Community */}\n          <Card className=\"bg-amber-900/20 backdrop-blur-md border-amber-500/30 hover:bg-amber-900/30 transition-all duration-300\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Users className=\"h-6 w-6 text-green-400\" />\n                Community & Governance\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-amber-50 space-y-4\">\n              <p>\n                Our community is at the heart of Save the Capybara. Token holders will have voting rights \n                on key decisions including new features, tournament formats, and reward distributions.\n              </p>\n              <div>\n                <h3 className=\"text-lg font-semibold text-white mb-2\">Community Features</h3>\n                <ul className=\"space-y-1\">\n                  <li>• Global leaderboards and competitions</li>\n                  <li>• Player guilds and team challenges</li>\n                  <li>• Community-created level contests</li>\n                  <li>• Regular AMAs and developer updates</li>\n                  <li>• Telegram bot for community management</li>\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Security */}\n          <Card className=\"bg-amber-900/20 backdrop-blur-md border-amber-500/30 hover:bg-amber-900/30 transition-all duration-300\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Shield className=\"h-6 w-6 text-orange-400\" />\n                Security & Fair Play\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-amber-50 space-y-4\">\n              <div>\n                <h3 className=\"text-lg font-semibold text-white mb-2\">Anti-Cheat Measures</h3>\n                <ul className=\"space-y-1\">\n                  <li>• Server-side validation of all game actions</li>\n                  <li>• One wallet per player restriction</li>\n                  <li>• Behavioral analysis for bot detection</li>\n                  <li>• Community reporting system</li>\n                </ul>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold text-white mb-2\">Data Protection</h3>\n                <p>\n                  All player data is encrypted and stored securely. We follow GDPR compliance standards \n                  and never share personal information with third parties.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Conclusion */}\n          <Card className=\"bg-gradient-to-r from-amber-500/20 to-emerald-500/20 backdrop-blur-md border-amber-400/30\">\n            <CardContent className=\"p-8 text-center\">\n              <h2 className=\"text-2xl font-bold text-white mb-4\">Join the Capybara Revolution</h2>\n              <p className=\"text-amber-50 mb-6\">\n                Save the Capybara represents the next evolution in play-to-earn gaming. With our unique \n                blend of skill-based gameplay, fair tokenomics, and community-driven development, \n                we're building more than just a game – we're creating a sustainable gaming economy.\n              </p>\n              <Button className=\"bg-gradient-to-r from-amber-500 to-emerald-600 hover:from-amber-600 hover:to-emerald-700 text-white font-bold px-8 py-3\">\n                Start Playing Today\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n};","size_bytes":10863},"client/src/components/LoadingScreen.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport { motion } from 'framer-motion';\n\nconst backgroundImage = '/images/AAA_capybara_wetland_background_ab88ce49.png';\nconst heroImage = '/images/AAA_capybara_hero_character_0a40b727.png';\n\ninterface LoadingScreenProps {\n  onLoadingComplete: () => void;\n}\n\nexport const LoadingScreen: React.FC<LoadingScreenProps> = ({ onLoadingComplete }) => {\n  const [progress, setProgress] = useState(0);\n  const [loadingText, setLoadingText] = useState('Entering the mystical wetlands...');\n\n  const loadingMessages = [\n    'Entering the mystical wetlands...',\n    'Awakening the capybara guardian...',\n    'Preparing magical barriers...',\n    'Summoning protective spirits...',\n    'Ready for adventure!'\n  ];\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setProgress(prev => {\n        const newProgress = prev + 2;\n        \n        // Update loading text based on progress\n        const messageIndex = Math.floor((newProgress / 100) * loadingMessages.length);\n        if (messageIndex < loadingMessages.length) {\n          setLoadingText(loadingMessages[messageIndex]);\n        }\n        \n        if (newProgress >= 100) {\n          clearInterval(interval);\n          setTimeout(onLoadingComplete, 500);\n          return 100;\n        }\n        return newProgress;\n      });\n    }, 50);\n\n    return () => clearInterval(interval);\n  }, [onLoadingComplete]);\n\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center relative overflow-hidden\">\n      {/* Background */}\n      <div \n        className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n        style={{ \n          backgroundImage: `url(${backgroundImage})`,\n          filter: 'brightness(0.6) contrast(1.1)'\n        }}\n      />\n      \n      {/* Overlay */}\n      <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-black/40\" />\n      \n      {/* Content */}\n      <div className=\"relative z-10 text-center\">\n        {/* Capybara character with loading animation */}\n        <motion.div\n          className=\"mb-8\"\n          animate={{ \n            y: [0, -10, 0],\n            rotate: [0, 2, -2, 0]\n          }}\n          transition={{ \n            duration: 2,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        >\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-yellow-300/40 to-green-300/40 rounded-full blur-3xl scale-150\" />\n            <img \n              src={heroImage} \n              alt=\"Loading Capybara\" \n              className=\"w-48 h-48 object-contain drop-shadow-2xl relative z-10\"\n            />\n            \n            {/* Spinning sparkles */}\n            <motion.div\n              className=\"absolute inset-0 flex items-center justify-center\"\n              animate={{ rotate: 360 }}\n              transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n            >\n              <div className=\"w-64 h-64 relative\">\n                <div className=\"absolute top-0 left-1/2 transform -translate-x-1/2 text-2xl\">✨</div>\n                <div className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2 text-2xl\">✨</div>\n                <div className=\"absolute left-0 top-1/2 transform -translate-y-1/2 text-2xl\">✨</div>\n                <div className=\"absolute right-0 top-1/2 transform -translate-y-1/2 text-2xl\">✨</div>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n        \n        {/* Loading text */}\n        <motion.h2 \n          className=\"text-3xl font-bold text-amber-100 mb-8\"\n          key={loadingText}\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n        >\n          {loadingText}\n        </motion.h2>\n        \n        {/* Progress bar */}\n        <div className=\"w-80 mx-auto\">\n          <div className=\"bg-amber-900/30 rounded-full h-4 backdrop-blur-sm border border-amber-500/30\">\n            <motion.div \n              className=\"bg-gradient-to-r from-amber-400 via-yellow-400 to-amber-400 h-full rounded-full relative overflow-hidden\"\n              style={{ width: `${progress}%` }}\n              initial={{ width: 0 }}\n              animate={{ width: `${progress}%` }}\n              transition={{ duration: 0.3 }}\n            >\n              {/* Animated shimmer effect */}\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 1.5, repeat: Infinity, ease: \"easeInOut\" }}\n              />\n            </motion.div>\n          </div>\n          \n          {/* Progress percentage */}\n          <motion.p \n            className=\"text-amber-200 text-lg mt-4 font-light\"\n            animate={{ opacity: [1, 0.5, 1] }}\n            transition={{ duration: 1.5, repeat: Infinity }}\n          >\n            {progress}%\n          </motion.p>\n        </div>\n      </div>\n    </div>\n  );\n};","size_bytes":5095},"client/src/utils/seedPhraseGenerator.ts":{"content":"// Word list for generating 4-word seed phrases\nconst WORD_LIST = [\n    // Animals\n    'capybara', 'dolphin', 'elephant', 'falcon', 'giraffe', 'hamster', 'iguana', 'jaguar',\n    'kangaroo', 'lemur', 'mongoose', 'narwhal', 'octopus', 'penguin', 'quokka', 'rabbit',\n    'seahorse', 'turtle', 'unicorn', 'vulture', 'walrus', 'xerus', 'yak', 'zebra',\n    \n    // Nature\n    'aurora', 'breeze', 'crystal', 'dewdrop', 'ember', 'forest', 'galaxy', 'horizon',\n    'island', 'jungle', 'lagoon', 'meadow', 'nebula', 'ocean', 'peak', 'quartz',\n    'river', 'storm', 'thunder', 'valley', 'wave', 'zephyr',\n    \n    // Objects\n    'anchor', 'beacon', 'compass', 'diamond', 'engine', 'feather', 'guardian', 'harbor',\n    'ivory', 'jewel', 'key', 'lantern', 'mirror', 'needle', 'orb', 'prism',\n    'quest', 'relic', 'shield', 'torch', 'unity', 'vessel', 'wand', 'zenith',\n    \n    // Colors & Elements\n    'amber', 'bronze', 'copper', 'emerald', 'flame', 'gold', 'iron', 'jade',\n    'lunar', 'marble', 'onyx', 'pearl', 'ruby', 'silver', 'topaz', 'violet'\n];\n\nexport const generateSeedPhrase = (): string => {\n    const shuffled = [...WORD_LIST].sort(() => Math.random() - 0.5);\n    return shuffled.slice(0, 4).join(' ');\n};\n\nexport const validateSeedPhrase = (phrase: string): boolean => {\n    const words = phrase.trim().toLowerCase().split(' ');\n    return words.length === 4 && words.every(word => WORD_LIST.includes(word));\n};\n\nexport const formatSeedPhrase = (phrase: string): string => {\n    return phrase.toLowerCase().trim().replace(/\\s+/g, ' ');\n};","size_bytes":1542},"client/src/utils/solanaValidator.ts":{"content":"import { PublicKey } from '@solana/web3.js';\n\nexport const validateSolanaWallet = (address: string): boolean => {\n    try {\n        // Check if it's a valid base58 Solana public key\n        new PublicKey(address);\n        return true;\n    } catch (error) {\n        return false;\n    }\n};\n\nexport const isValidSolanaAddress = (address: string): boolean => {\n    // Basic format checks\n    if (!address || typeof address !== 'string') {\n        return false;\n    }\n    \n    // Solana addresses are 32-44 characters long\n    if (address.length < 32 || address.length > 44) {\n        return false;\n    }\n    \n    // Check if it contains only valid base58 characters\n    const base58Regex = /^[A-HJ-NP-Z1-9]+$/;\n    if (!base58Regex.test(address)) {\n        return false;\n    }\n    \n    // Use Solana's PublicKey validation\n    return validateSolanaWallet(address);\n};\n\nexport const formatSolanaAddress = (address: string): string => {\n    if (!address || address.length < 8) return address;\n    return `${address.slice(0, 4)}...${address.slice(-4)}`;\n};","size_bytes":1049}},"version":1}